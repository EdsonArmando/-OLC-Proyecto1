
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import IntruccionHTML.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symh.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\012\000\002\007" +
    "\004\000\002\007\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\012\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\017\012\000\002\014\012\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\016" +
    "\003\000\002\016\003\000\002\006\012\000\002\015\014" +
    "\000\002\005\004\000\002\005\003\000\002\003\004\000" +
    "\002\003\003\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\014\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\014\011\001\002\000" +
    "\006\005\021\011\020\001\002\000\004\014\ufffc\001\002" +
    "\000\004\014\ufffe\001\002\000\004\014\ufffd\001\002\000" +
    "\004\014\016\001\002\000\010\005\021\011\020\016\022" +
    "\001\002\000\004\014\uffff\001\002\000\004\015\047\001" +
    "\002\000\004\015\025\001\002\000\004\004\023\001\002" +
    "\000\004\015\024\001\002\000\004\002\000\001\002\000" +
    "\006\003\026\014\027\001\002\000\004\015\046\001\002" +
    "\000\004\006\034\001\002\000\004\014\ufff9\001\002\000" +
    "\004\014\032\001\002\000\006\006\034\016\035\001\002" +
    "\000\004\014\ufffa\001\002\000\004\015\040\001\002\000" +
    "\004\005\036\001\002\000\004\015\037\001\002\000\004" +
    "\014\ufffb\001\002\000\004\020\041\001\002\000\004\014" +
    "\042\001\002\000\004\016\043\001\002\000\004\006\044" +
    "\001\002\000\004\015\045\001\002\000\004\014\ufff7\001" +
    "\002\000\004\014\ufff8\001\002\000\006\003\050\014\052" +
    "\001\002\000\004\015\103\001\002\000\004\014\ufff4\001" +
    "\002\000\006\007\061\010\062\001\002\000\004\014\057" +
    "\001\002\000\004\014\ufff2\001\002\000\004\014\ufff1\001" +
    "\002\000\004\014\ufff5\001\002\000\010\007\061\010\062" +
    "\016\060\001\002\000\004\011\101\001\002\000\004\015" +
    "\073\001\002\000\004\012\063\001\002\000\004\013\064" +
    "\001\002\000\004\017\065\001\002\000\004\015\066\001" +
    "\002\000\004\014\067\001\002\000\004\016\070\001\002" +
    "\000\004\010\071\001\002\000\004\015\072\001\002\000" +
    "\004\014\uffef\001\002\000\004\020\074\001\002\000\004" +
    "\014\075\001\002\000\004\016\076\001\002\000\004\007" +
    "\077\001\002\000\004\015\100\001\002\000\004\014\ufff0" +
    "\001\002\000\004\015\102\001\002\000\004\014\ufff6\001" +
    "\002\000\004\014\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\014\012\012\013\013\014\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\016\013\013\014\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\030\017\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\053\011\052\015\054\016\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\053\015\054\016\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/
    public String nuevo;
    public LinkedList<InstruccionHtml> resultados = new LinkedList<>();
    public String resultado = "";
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHTML$actions {




  private final SintacticoHTML parser;

  /** Constructor */
  CUP$SintacticoHTML$actions(SintacticoHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHTML$do_action_part00000000(
    int                        CUP$SintacticoHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHTML$parser,
    java.util.Stack            CUP$SintacticoHTML$stack,
    int                        CUP$SintacticoHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHTML$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHTML$parser.done_parsing();
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tMenorQue tHtml tMayorQue LISTAHTML tMenorQue tDiagonal tHtml tMayorQue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).right;
		LinkedList<InstruccionHtml> a = (LinkedList<InstruccionHtml>)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).value;
		
            parser.resultados=a;
         
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAHTML ::= LISTAHTML ITEMHTML 
            {
              LinkedList<InstruccionHtml> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).right;
		LinkedList<InstruccionHtml> a = (LinkedList<InstruccionHtml>)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		InstruccionHtml b = (InstruccionHtml)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTAHTML",5, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAHTML ::= ITEMHTML 
            {
              LinkedList<InstruccionHtml> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		InstruccionHtml b = (InstruccionHtml)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTAHTML",5, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ITEMHTML ::= HEAD 
            {
              InstruccionHtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		Head a = (Head)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 RESULT=a;
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ITEMHTML",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ITEMHTML ::= BODY 
            {
              InstruccionHtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		Body a = (Body)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 RESULT=a;
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ITEMHTML",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEAD ::= tMenorQue tHead tMayorQue LISTAHEAD tMenorQue tDiagonal tHead tMayorQue 
            {
              Head RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).right;
		LinkedList<EtiquetaHtml> a = (LinkedList<EtiquetaHtml>)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).value;
		
            RESULT=new Head(a);
         
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("HEAD",9, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAHEAD ::= LISTAHEAD ITEMHEAD 
            {
              LinkedList<EtiquetaHtml> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).right;
		LinkedList<EtiquetaHtml> a = (LinkedList<EtiquetaHtml>)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		Title b = (Title)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTAHEAD",6, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAHEAD ::= ITEMHEAD 
            {
              LinkedList<EtiquetaHtml> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		Title b = (Title)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(b);
             
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTAHEAD",6, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAHEAD ::= error tMayorQue 
            {
              LinkedList<EtiquetaHtml> RESULT =null;
		 
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTAHEAD",6, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ITEMHEAD ::= tMenorQue tTitle tMayorQue tCadenaInterna tMenorQue tDiagonal tTitle tMayorQue 
            {
              Title RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).value;
		
            RESULT=new Title(a);
            parser.nuevo = a;
           
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ITEMHEAD",13, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY ::= tMenorQue tBody tMayorQue LISTABODY tMenorQue tDiagonal tBody tMayorQue 
            {
              Body RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).right;
		LinkedList<EtiquetaHtml> a = (LinkedList<EtiquetaHtml>)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).value;
		 
        RESULT=new Body(a);
    
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("BODY",10, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTABODY ::= LISTABODY ITEMBODY 
            {
              LinkedList<EtiquetaHtml> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).right;
		LinkedList<EtiquetaHtml> a = (LinkedList<EtiquetaHtml>)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		EtiquetaHtml b = (EtiquetaHtml)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 
             RESULT = a;
             RESULT.add(b);
            
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTABODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTABODY ::= ITEMBODY 
            {
              LinkedList<EtiquetaHtml> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		EtiquetaHtml b = (EtiquetaHtml)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTABODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTABODY ::= error tMayorQue 
            {
              LinkedList<EtiquetaHtml> RESULT =null;
		 
    
            
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTABODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ITEMBODY ::= NOUFE 
            {
              EtiquetaHtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		Noufe a = (Noufe)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 RESULT=a;
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ITEMBODY",12, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ITEMBODY ::= DIV 
            {
              EtiquetaHtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()).right;
		Div a = (Div)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.peek()).value;
		 RESULT=a;
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ITEMBODY",12, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NOUFE ::= tMenorQue tNoufe tMayorQue tCadenaInterna tMenorQue tDiagonal tNoufe tMayorQue 
            {
              Noufe RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-4)).value;
		
        RESULT=new Noufe(a);
     
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("NOUFE",4, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DIV ::= tMenorQue tDiv tId tIgual tCadena tMayorQue tMenorQue tDiagonal tDiv tMayorQue 
            {
              Div RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-5)).value;
		
        RESULT=new Div(a);
     
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("DIV",11, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTABODYEMPTY ::= LISTABODY tMenorQue 
            {
              Object RESULT =null;
		 
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTABODYEMPTY",3, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTABODYEMPTY ::= tMenorQue 
            {
              Object RESULT =null;
		 
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTABODYEMPTY",3, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTATRIB ::= LISTATRIB ATRIB 
            {
              Object RESULT =null;
		 
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTATRIB",1, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTATRIB ::= ATRIB 
            {
              Object RESULT =null;
		 
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("LISTATRIB",1, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIB ::= tId tIgual tCadena 
            {
              Object RESULT =null;
		 
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ATRIB",2, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHTML$do_action(
    int                        CUP$SintacticoHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHTML$parser,
    java.util.Stack            CUP$SintacticoHTML$stack,
    int                        CUP$SintacticoHTML$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHTML$do_action_part00000000(
                               CUP$SintacticoHTML$act_num,
                               CUP$SintacticoHTML$parser,
                               CUP$SintacticoHTML$stack,
                               CUP$SintacticoHTML$top);
    }
}

}
