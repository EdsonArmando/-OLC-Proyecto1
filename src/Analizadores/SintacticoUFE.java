
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Entorno.Simbolo.TipoOperador;
import Expresion.*;
import Sentecia.*;
import Entorno.Simbolo;
import Datos.*;
import IntruccionHTML.*;
import Expresion.Operacion.Tipo_operacion;
import Datos.Atributo.TIPOOPERACION;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoUFE extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symu.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoUFE() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoUFE(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoUFE(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\013\003\000\002\014" +
    "\004\000\002\014\003\000\002\014\004\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\022" +
    "\004\000\002\021\007\000\002\033\005\000\002\033\003" +
    "\000\002\024\005\000\002\036\005\000\002\036\003\000" +
    "\002\036\004\000\002\037\005\000\002\037\003\000\002" +
    "\037\007\000\002\027\013\000\002\027\003\000\002\040" +
    "\006\000\002\026\011\000\002\015\004\000\002\015\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\020\011\000\002\017\011\000\002\016" +
    "\003\000\002\016\004\000\002\016\005\000\002\016\004" +
    "\000\002\056\011\000\002\057\004\000\002\057\003\000" +
    "\002\060\012\000\002\061\006\000\002\030\006\000\002" +
    "\030\010\000\002\042\004\000\002\042\003\000\002\041" +
    "\004\000\002\041\003\000\002\041\004\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\007\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\047\005\000\002\052\006\000\002\046" +
    "\012\000\002\034\012\000\002\034\003\000\002\035\010" +
    "\000\002\035\006\000\002\035\003\000\002\043\012\000" +
    "\002\051\012\000\002\044\012\000\002\032\006\000\002" +
    "\032\004\000\002\032\006\000\002\032\004\000\002\045" +
    "\012\000\002\050\007\000\002\062\003\000\002\062\002" +
    "\000\002\063\004\000\002\063\003\000\002\063\004\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\007\000" +
    "\002\031\004\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\006" +
    "\000\002\031\006\000\002\031\006\000\002\031\006\000" +
    "\002\031\006\000\002\031\005\000\002\031\005\000\002" +
    "\031\004\000\002\031\006\000\002\031\003\000\002\031" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\052\003\036\004\004\007\032\010\005\012" +
    "\025\013\007\014\017\024\027\026\041\027\033\030\043" +
    "\031\034\032\040\034\030\047\044\057\022\064\006\074" +
    "\031\075\023\077\015\001\002\000\076\016\uff89\017\uff89" +
    "\020\uff89\023\uff89\025\uff89\033\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\060" +
    "\uff89\063\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\110\uff89\001\002\000\004\024\u0134\001\002\000" +
    "\004\024\u012e\001\002\000\012\003\241\005\231\006\243" +
    "\054\234\001\002\000\056\002\ufffb\003\ufffb\004\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\017\ufffb\024\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb\047" +
    "\ufffb\057\ufffb\064\ufffb\074\ufffb\075\ufffb\077\ufffb\001\002" +
    "\000\056\002\ufff7\003\ufff7\004\ufff7\007\ufff7\010\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\017\ufff7\024\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\034\ufff7\047\ufff7\057\ufff7\064" +
    "\ufff7\074\ufff7\075\ufff7\077\ufff7\001\002\000\056\002\ufffe" +
    "\003\ufffe\004\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\017\ufffe\024\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\034\ufffe\047\ufffe\057\ufffe\064\ufffe\074\ufffe\075" +
    "\ufffe\077\ufffe\001\002\000\056\002\ufffa\003\ufffa\004\ufffa" +
    "\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\017\ufffa\024" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\034\ufffa" +
    "\047\ufffa\057\ufffa\064\ufffa\074\ufffa\075\ufffa\077\ufffa\001" +
    "\002\000\056\002\ufff9\003\ufff9\004\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\017\ufff9\024\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\034\ufff9\047\ufff9\057\ufff9" +
    "\064\ufff9\074\ufff9\075\ufff9\077\ufff9\001\002\000\004\024" +
    "\221\001\002\000\056\002\ufffc\003\ufffc\004\ufffc\007\ufffc" +
    "\010\ufffc\012\ufffc\013\ufffc\014\ufffc\017\ufffc\024\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\034\ufffc\047\ufffc" +
    "\057\ufffc\064\ufffc\074\ufffc\075\ufffc\077\ufffc\001\002\000" +
    "\006\003\206\030\207\001\002\000\056\002\ufff8\003\ufff8" +
    "\004\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\017" +
    "\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\034\ufff8\047\ufff8\057\ufff8\064\ufff8\074\ufff8\075\ufff8\077" +
    "\ufff8\001\002\000\060\002\uffd8\003\uffd8\004\uffd8\007\uffd8" +
    "\010\uffd8\011\166\012\uffd8\013\uffd8\014\uffd8\017\uffd8\024" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8" +
    "\047\uffd8\057\uffd8\064\uffd8\074\uffd8\075\uffd8\077\uffd8\001" +
    "\002\000\004\004\163\001\002\000\004\024\154\001\002" +
    "\000\034\016\153\036\065\037\055\040\057\042\067\046" +
    "\062\047\061\050\064\051\066\052\060\053\063\054\054" +
    "\063\056\001\002\000\004\030\133\001\002\000\056\002" +
    "\ufff6\003\ufff6\004\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\017\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\034\ufff6\047\ufff6\057\ufff6\064\ufff6\074\ufff6" +
    "\075\ufff6\077\ufff6\001\002\000\030\004\004\024\027\026" +
    "\041\027\033\030\052\031\034\032\040\034\030\047\044" +
    "\057\022\074\031\001\002\000\076\016\uff85\017\uff85\020" +
    "\uff85\023\uff85\025\uff85\033\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\060\uff85" +
    "\063\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106" +
    "\uff85\110\uff85\001\002\000\076\016\uff88\017\uff88\020\uff88" +
    "\023\uff88\025\uff88\033\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\060\uff88\063" +
    "\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88" +
    "\110\uff88\001\002\000\004\024\123\001\002\000\076\016" +
    "\uff83\017\uff83\020\uff83\023\uff83\025\uff83\033\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\060\uff83\063\uff83\101\uff83\102\uff83\103\uff83\104" +
    "\uff83\105\uff83\106\uff83\110\uff83\001\002\000\076\016\uff87" +
    "\017\uff87\020\uff87\023\uff87\025\uff87\033\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054" +
    "\uff87\060\uff87\063\uff87\101\uff87\102\uff87\103\uff87\104\uff87" +
    "\105\uff87\106\uff87\110\uff87\001\002\000\056\002\ufff5\003" +
    "\ufff5\004\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\017\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\034\ufff5\047\ufff5\057\ufff5\064\ufff5\074\ufff5\075\ufff5" +
    "\077\ufff5\001\002\000\060\002\uffe6\003\uffe6\004\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\122\017\uffe6" +
    "\024\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034" +
    "\uffe6\047\uffe6\057\uffe6\064\uffe6\074\uffe6\075\uffe6\077\uffe6" +
    "\001\002\000\056\002\ufff3\003\ufff3\004\ufff3\007\ufff3\010" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\017\ufff3\024\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\034\ufff3\047\ufff3\057" +
    "\ufff3\064\ufff3\074\ufff3\075\ufff3\077\ufff3\001\002\000\076" +
    "\016\uff86\017\uff86\020\uff86\023\uff86\025\uff86\033\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\054\uff86\060\uff86\063\uff86\101\uff86\102\uff86\103\uff86" +
    "\104\uff86\105\uff86\106\uff86\110\uff86\001\002\000\076\016" +
    "\uff84\017\uff84\020\uff84\023\uff84\025\uff84\033\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\054\uff84\060\uff84\063\uff84\101\uff84\102\uff84\103\uff84\104" +
    "\uff84\105\uff84\106\uff84\110\uff84\001\002\000\056\002\ufff4" +
    "\003\ufff4\004\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\017\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\034\ufff4\047\ufff4\057\ufff4\064\ufff4\074\ufff4\075" +
    "\ufff4\077\ufff4\001\002\000\040\015\117\016\uff8b\022\114" +
    "\036\uff8b\037\uff8b\040\uff8b\042\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\063\uff8b\001\002" +
    "\000\030\004\004\024\027\026\041\027\033\030\052\031" +
    "\034\032\040\034\030\047\044\057\022\074\031\001\002" +
    "\000\054\002\000\003\051\004\004\007\032\010\005\012" +
    "\025\013\007\014\017\024\027\026\041\027\033\030\043" +
    "\031\034\032\040\034\030\047\044\057\022\064\006\074" +
    "\031\075\023\077\015\001\002\000\004\002\047\001\002" +
    "\000\004\002\001\001\002\000\056\002\uffff\003\uffff\004" +
    "\uffff\007\uffff\010\uffff\012\uffff\013\uffff\014\uffff\017\uffff" +
    "\024\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\034" +
    "\uffff\047\uffff\057\uffff\064\uffff\074\uffff\075\uffff\077\uffff" +
    "\001\002\000\056\002\uffe6\003\uffe6\004\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\017\uffe6\024\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\047\uffe6\057" +
    "\uffe6\064\uffe6\074\uffe6\075\uffe6\077\uffe6\001\002\000\100" +
    "\016\uff8b\017\uff8b\020\uff8b\022\114\023\uff8b\025\uff8b\033" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\060\uff8b\063\uff8b\101\uff8b\102\uff8b" +
    "\103\uff8b\104\uff8b\105\uff8b\106\uff8b\110\uff8b\001\002\000" +
    "\076\016\uff9d\017\uff9d\020\uff9d\023\uff9d\025\uff9d\033\uff9d" +
    "\036\065\037\055\040\057\041\uff9d\042\067\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\064\051\066\052\060" +
    "\053\063\054\054\060\uff9d\063\056\101\uff9d\102\uff9d\103" +
    "\uff9d\104\uff9d\105\uff9d\106\uff9d\110\uff9d\001\002\000\032" +
    "\004\004\015\111\024\027\026\041\027\033\030\052\031" +
    "\034\032\040\034\030\047\044\057\022\074\031\001\002" +
    "\000\004\037\107\001\002\000\030\004\004\024\027\026" +
    "\041\027\033\030\052\031\034\032\040\034\030\047\044" +
    "\057\022\074\031\001\002\000\030\004\004\024\027\026" +
    "\041\027\033\030\052\031\034\032\040\034\030\047\044" +
    "\057\022\074\031\001\002\000\030\004\004\024\027\026" +
    "\041\027\033\030\052\031\034\032\040\034\030\047\044" +
    "\057\022\074\031\001\002\000\030\004\004\024\027\026" +
    "\041\027\033\030\052\031\034\032\040\034\030\047\044" +
    "\057\022\074\031\001\002\000\030\004\004\024\027\026" +
    "\041\027\033\030\052\031\034\032\040\034\030\047\044" +
    "\057\022\074\031\001\002\000\032\004\004\015\077\024" +
    "\027\026\041\027\033\030\052\031\034\032\040\034\030" +
    "\047\044\057\022\074\031\001\002\000\030\004\004\024" +
    "\027\026\041\027\033\030\052\031\034\032\040\034\030" +
    "\047\044\057\022\074\031\001\002\000\004\036\074\001" +
    "\002\000\030\004\004\024\027\026\041\027\033\030\052" +
    "\031\034\032\040\034\030\047\044\057\022\074\031\001" +
    "\002\000\032\004\004\015\070\024\027\026\041\027\033" +
    "\030\052\031\034\032\040\034\030\047\044\057\022\074" +
    "\031\001\002\000\030\004\004\024\027\026\041\027\033" +
    "\030\052\031\034\032\040\034\030\047\044\057\022\074" +
    "\031\001\002\000\076\016\uff8f\017\uff8f\020\uff8f\023\uff8f" +
    "\025\uff8f\033\uff8f\036\065\037\055\040\057\041\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\060\uff8f\063\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\110\uff8f" +
    "\001\002\000\076\016\uff92\017\uff92\020\uff92\023\uff92\025" +
    "\uff92\033\uff92\036\065\037\055\040\057\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\060\uff92\063\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\110\uff92\001" +
    "\002\000\076\016\uff99\017\uff99\020\uff99\023\uff99\025\uff99" +
    "\033\uff99\036\065\037\055\040\057\041\uff99\042\067\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\060\053\063\054\054\060\uff99\063\056\101\uff99\102" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\110\uff99\001\002" +
    "\000\030\004\004\024\027\026\041\027\033\030\052\031" +
    "\034\032\040\034\030\047\044\057\022\074\031\001\002" +
    "\000\076\016\uff90\017\uff90\020\uff90\023\uff90\025\uff90\033" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\060\uff90\063\uff90\101\uff90\102\uff90" +
    "\103\uff90\104\uff90\105\uff90\106\uff90\110\uff90\001\002\000" +
    "\076\016\uff9a\017\uff9a\020\uff9a\023\uff9a\025\uff9a\033\uff9a" +
    "\036\065\037\055\040\057\041\uff9a\042\067\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\060" +
    "\053\063\054\054\060\uff9a\063\056\101\uff9a\102\uff9a\103" +
    "\uff9a\104\uff9a\105\uff9a\106\uff9a\110\uff9a\001\002\000\030" +
    "\004\004\024\027\026\041\027\033\030\052\031\034\032" +
    "\040\034\030\047\044\057\022\074\031\001\002\000\076" +
    "\016\uff95\017\uff95\020\uff95\023\uff95\025\uff95\033\uff95\036" +
    "\065\037\055\040\057\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\060\uff95\063\uff95\101\uff95\102\uff95\103\uff95" +
    "\104\uff95\105\uff95\106\uff95\110\uff95\001\002\000\076\016" +
    "\uff94\017\uff94\020\uff94\023\uff94\025\uff94\033\uff94\036\065" +
    "\037\055\040\057\041\uff94\042\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\060\uff94\063\uff94\101\uff94\102\uff94\103\uff94\104" +
    "\uff94\105\uff94\106\uff94\110\uff94\001\002\000\076\016\uff9c" +
    "\017\uff9c\020\uff9c\023\uff9c\025\uff9c\033\uff9c\036\065\037" +
    "\055\040\057\041\uff9c\042\067\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\064\051\066\052\060\053\063\054" +
    "\054\060\uff9c\063\056\101\uff9c\102\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\106\uff9c\110\uff9c\001\002\000\076\016\uff9b\017" +
    "\uff9b\020\uff9b\023\uff9b\025\uff9b\033\uff9b\036\065\037\055" +
    "\040\057\041\uff9b\042\067\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\064\051\066\052\060\053\063\054\054" +
    "\060\uff9b\063\056\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105" +
    "\uff9b\106\uff9b\110\uff9b\001\002\000\076\016\uff98\017\uff98" +
    "\020\uff98\023\uff98\025\uff98\033\uff98\036\065\037\055\040" +
    "\057\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\060" +
    "\uff98\063\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98" +
    "\106\uff98\110\uff98\001\002\000\076\016\uff8e\017\uff8e\020" +
    "\uff8e\023\uff8e\025\uff8e\033\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\060\uff8e" +
    "\063\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106" +
    "\uff8e\110\uff8e\001\002\000\076\016\uff97\017\uff97\020\uff97" +
    "\023\uff97\025\uff97\033\uff97\036\065\037\055\040\057\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\060\uff97\063" +
    "\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\106\uff97" +
    "\110\uff97\001\002\000\030\004\004\024\027\026\041\027" +
    "\033\030\052\031\034\032\040\034\030\047\044\057\022" +
    "\074\031\001\002\000\076\016\uff91\017\uff91\020\uff91\023" +
    "\uff91\025\uff91\033\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\060\uff91\063\uff91" +
    "\101\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91\110" +
    "\uff91\001\002\000\030\004\004\024\027\026\041\027\033" +
    "\030\052\031\034\032\040\034\030\047\044\057\022\074" +
    "\031\001\002\000\076\016\uff96\017\uff96\020\uff96\023\uff96" +
    "\025\uff96\033\uff96\036\065\037\055\040\057\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\060\uff96\063\uff96\101" +
    "\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106\uff96\110\uff96" +
    "\001\002\000\076\016\uff93\017\uff93\020\uff93\023\uff93\025" +
    "\uff93\033\uff93\036\065\037\055\040\057\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\060\uff93\063\uff93\101\uff93" +
    "\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\110\uff93\001" +
    "\002\000\030\004\004\024\027\026\041\027\033\030\052" +
    "\031\034\032\040\034\030\047\044\057\022\074\031\001" +
    "\002\000\034\023\116\036\065\037\055\040\057\042\067" +
    "\046\062\047\061\050\064\051\066\052\060\053\063\054" +
    "\054\063\056\001\002\000\076\016\uff8c\017\uff8c\020\uff8c" +
    "\023\uff8c\025\uff8c\033\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\060\uff8c\063" +
    "\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c" +
    "\110\uff8c\001\002\000\030\004\004\024\027\026\041\027" +
    "\033\030\052\031\034\032\040\034\030\047\044\057\022" +
    "\074\031\001\002\000\034\016\121\036\065\037\055\040" +
    "\057\042\067\046\062\047\061\050\064\051\066\052\060" +
    "\053\063\054\054\063\056\001\002\000\056\002\uffe5\003" +
    "\uffe5\004\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\017\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\034\uffe5\047\uffe5\057\uffe5\064\uffe5\074\uffe5\075\uffe5" +
    "\077\uffe5\001\002\000\056\002\ufffd\003\ufffd\004\ufffd\007" +
    "\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\017\ufffd\024\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\034\ufffd\047" +
    "\ufffd\057\ufffd\064\ufffd\074\ufffd\075\ufffd\077\ufffd\001\002" +
    "\000\030\004\004\024\027\026\041\027\033\030\052\031" +
    "\034\032\040\034\030\047\044\057\022\074\031\001\002" +
    "\000\034\025\125\036\065\037\055\040\057\042\067\046" +
    "\062\047\061\050\064\051\066\052\060\053\063\054\054" +
    "\063\056\001\002\000\004\021\126\001\002\000\052\003" +
    "\036\004\004\007\032\010\005\012\025\013\007\014\017" +
    "\024\027\026\041\027\033\030\043\031\034\032\040\034" +
    "\030\047\044\057\022\064\006\074\031\075\023\077\015" +
    "\001\002\000\054\003\051\004\004\007\032\010\005\012" +
    "\025\013\007\014\017\017\130\024\027\026\041\027\033" +
    "\030\043\031\034\032\040\034\030\047\044\057\022\064" +
    "\006\074\031\075\023\077\015\001\002\000\056\002\uffda" +
    "\003\uffda\004\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014" +
    "\uffda\017\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\034\uffda\047\uffda\057\uffda\064\uffda\074\uffda\075" +
    "\uffda\077\uffda\001\002\000\034\025\132\036\065\037\055" +
    "\040\057\042\067\046\062\047\061\050\064\051\066\052" +
    "\060\053\063\054\054\063\056\001\002\000\076\016\uff8a" +
    "\017\uff8a\020\uff8a\023\uff8a\025\uff8a\033\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a" +
    "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054" +
    "\uff8a\060\uff8a\063\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a" +
    "\105\uff8a\106\uff8a\110\uff8a\001\002\000\004\024\134\001" +
    "\002\000\004\025\135\001\002\000\004\021\136\001\002" +
    "\000\020\007\032\010\005\013\007\014\017\030\141\064" +
    "\006\075\023\001\002\000\022\007\uffe1\010\uffe1\013\uffe1" +
    "\014\uffe1\017\uffe1\030\uffe1\064\uffe1\075\uffe1\001\002\000" +
    "\022\007\uffe0\010\uffe0\013\uffe0\014\uffe0\017\uffe0\030\uffe0" +
    "\064\uffe0\075\uffe0\001\002\000\004\015\117\001\002\000" +
    "\022\007\uffdc\010\uffdc\013\uffdc\014\uffdc\017\uffdc\030\uffdc" +
    "\064\uffdc\075\uffdc\001\002\000\022\007\uffdf\010\uffdf\013" +
    "\uffdf\014\uffdf\017\uffdf\030\uffdf\064\uffdf\075\uffdf\001\002" +
    "\000\022\007\uffdb\010\uffdb\013\uffdb\014\uffdb\017\uffdb\030" +
    "\uffdb\064\uffdb\075\uffdb\001\002\000\022\007\uffde\010\uffde" +
    "\013\uffde\014\uffde\017\uffde\030\uffde\064\uffde\075\uffde\001" +
    "\002\000\022\007\uffe2\010\uffe2\013\uffe2\014\uffe2\017\uffe2" +
    "\030\uffe2\064\uffe2\075\uffe2\001\002\000\022\007\uffdd\010" +
    "\uffdd\013\uffdd\014\uffdd\017\uffdd\030\uffdd\064\uffdd\075\uffdd" +
    "\001\002\000\022\007\032\010\005\013\007\014\017\017" +
    "\151\030\141\064\006\075\023\001\002\000\056\002\uffe4" +
    "\003\uffe4\004\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\017\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\034\uffe4\047\uffe4\057\uffe4\064\uffe4\074\uffe4\075" +
    "\uffe4\077\uffe4\001\002\000\022\007\uffe3\010\uffe3\013\uffe3" +
    "\014\uffe3\017\uffe3\030\uffe3\064\uffe3\075\uffe3\001\002\000" +
    "\056\002\ufff2\003\ufff2\004\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\017\ufff2\024\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\034\ufff2\047\ufff2\057\ufff2\064\ufff2" +
    "\074\ufff2\075\ufff2\077\ufff2\001\002\000\030\004\004\024" +
    "\027\026\041\027\033\030\052\031\034\032\040\034\030" +
    "\047\044\057\022\074\031\001\002\000\006\025\160\045" +
    "\157\001\002\000\040\017\uffef\025\uffef\036\065\037\055" +
    "\040\057\042\067\045\uffef\046\062\047\061\050\064\051" +
    "\066\052\060\053\063\054\054\063\056\001\002\000\030" +
    "\004\004\024\027\026\041\027\033\030\052\031\034\032" +
    "\040\034\030\047\044\057\022\074\031\001\002\000\004" +
    "\016\161\001\002\000\056\002\ufff1\003\ufff1\004\ufff1\007" +
    "\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\017\ufff1\024\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\047" +
    "\ufff1\057\ufff1\064\ufff1\074\ufff1\075\ufff1\077\ufff1\001\002" +
    "\000\040\017\ufff0\025\ufff0\036\065\037\055\040\057\042" +
    "\067\045\ufff0\046\062\047\061\050\064\051\066\052\060" +
    "\053\063\054\054\063\056\001\002\000\076\016\uff8d\017" +
    "\uff8d\020\uff8d\023\uff8d\025\uff8d\033\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d" +
    "\060\uff8d\063\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105" +
    "\uff8d\106\uff8d\110\uff8d\001\002\000\056\002\uffd5\003\uffd5" +
    "\004\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\017" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\047\uffd5\057\uffd5\064\uffd5\074\uffd5\075\uffd5\077" +
    "\uffd5\001\002\000\060\002\uffd2\003\uffd2\004\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\017\uffd2\024" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2" +
    "\047\uffd2\057\uffd2\064\uffd2\074\uffd2\075\uffd2\077\uffd2\001" +
    "\002\000\006\021\172\064\173\001\002\000\060\002\uffd7" +
    "\003\uffd7\004\uffd7\007\uffd7\010\uffd7\011\166\012\uffd7\013" +
    "\uffd7\014\uffd7\017\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\034\uffd7\047\uffd7\057\uffd7\064\uffd7\074" +
    "\uffd7\075\uffd7\077\uffd7\001\002\000\056\002\uffd6\003\uffd6" +
    "\004\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\017" +
    "\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\034\uffd6\047\uffd6\057\uffd6\064\uffd6\074\uffd6\075\uffd6\077" +
    "\uffd6\001\002\000\060\002\uffd3\003\uffd3\004\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\017\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\034\uffd3" +
    "\047\uffd3\057\uffd3\064\uffd3\074\uffd3\075\uffd3\077\uffd3\001" +
    "\002\000\052\003\036\004\004\007\032\010\005\012\025" +
    "\013\007\014\017\024\027\026\041\027\033\030\043\031" +
    "\034\032\040\034\030\047\044\057\022\064\006\074\031" +
    "\075\023\077\015\001\002\000\004\024\174\001\002\000" +
    "\030\004\004\024\027\026\041\027\033\030\052\031\034" +
    "\032\040\034\030\047\044\057\022\074\031\001\002\000" +
    "\034\025\176\036\065\037\055\040\057\042\067\046\062" +
    "\047\061\050\064\051\066\052\060\053\063\054\054\063" +
    "\056\001\002\000\004\021\177\001\002\000\052\003\036" +
    "\004\004\007\032\010\005\012\025\013\007\014\017\024" +
    "\027\026\041\027\033\030\043\031\034\032\040\034\030" +
    "\047\044\057\022\064\006\074\031\075\023\077\015\001" +
    "\002\000\054\003\051\004\004\007\032\010\005\012\025" +
    "\013\007\014\017\017\201\024\027\026\041\027\033\030" +
    "\043\031\034\032\040\034\030\047\044\057\022\064\006" +
    "\074\031\075\023\077\015\001\002\000\060\002\uffd1\003" +
    "\uffd1\004\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\017\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\034\uffd1\047\uffd1\057\uffd1\064\uffd1\074\uffd1" +
    "\075\uffd1\077\uffd1\001\002\000\054\003\051\004\004\007" +
    "\032\010\005\012\025\013\007\014\017\017\203\024\027" +
    "\026\041\027\033\030\043\031\034\032\040\034\030\047" +
    "\044\057\022\064\006\074\031\075\023\077\015\001\002" +
    "\000\056\002\uffd0\003\uffd0\004\uffd0\007\uffd0\010\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\017\uffd0\024\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\034\uffd0\047\uffd0\057\uffd0\064" +
    "\uffd0\074\uffd0\075\uffd0\077\uffd0\001\002\000\006\016\216" +
    "\045\217\001\002\000\006\016\uffec\045\uffec\001\002\000" +
    "\004\016\215\001\002\000\010\015\210\016\uffe9\045\uffe9" +
    "\001\002\000\032\004\004\021\211\024\027\026\041\027" +
    "\033\030\052\031\034\032\040\034\030\047\044\057\022" +
    "\074\031\001\002\000\030\004\004\024\027\026\041\027" +
    "\033\030\052\031\034\032\040\034\030\047\044\057\022" +
    "\074\031\001\002\000\036\016\uffea\036\065\037\055\040" +
    "\057\042\067\045\uffea\046\062\047\061\050\064\051\066" +
    "\052\060\053\063\054\054\063\056\001\002\000\006\017" +
    "\214\045\157\001\002\000\006\016\uffe8\045\uffe8\001\002" +
    "\000\006\016\uffeb\045\uffeb\001\002\000\056\002\uffee\003" +
    "\uffee\004\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee" +
    "\017\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\034\uffee\047\uffee\057\uffee\064\uffee\074\uffee\075\uffee" +
    "\077\uffee\001\002\000\004\030\207\001\002\000\006\016" +
    "\uffed\045\uffed\001\002\000\004\054\222\001\002\000\004" +
    "\030\223\001\002\000\004\035\224\001\002\000\004\045" +
    "\225\001\002\000\004\030\226\001\002\000\004\025\227" +
    "\001\002\000\004\016\230\001\002\000\056\002\uffe7\003" +
    "\uffe7\004\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\017\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\034\uffe7\047\uffe7\057\uffe7\064\uffe7\074\uffe7\075\uffe7" +
    "\077\uffe7\001\002\000\004\030\u012a\001\002\000\010\006" +
    "\uffc7\025\uffc7\054\uffc7\001\002\000\010\006\uffc3\025\uffc3" +
    "\054\uffc3\001\002\000\020\055\267\061\261\065\263\066" +
    "\265\071\264\072\266\073\262\001\002\000\004\054\255" +
    "\001\002\000\010\006\uffc6\025\uffc6\054\uffc6\001\002\000" +
    "\010\006\uffca\025\uffca\054\uffca\001\002\000\010\006\uffc1" +
    "\025\uffc1\054\uffc1\001\002\000\004\053\254\001\002\000" +
    "\010\006\243\025\252\054\234\001\002\000\004\030\247" +
    "\001\002\000\010\006\uffc8\025\uffc8\054\uffc8\001\002\000" +
    "\010\006\uffc2\025\uffc2\054\uffc2\001\002\000\010\006\uffc4" +
    "\025\uffc4\054\uffc4\001\002\000\004\053\250\001\002\000" +
    "\010\006\uffc0\025\uffc0\054\uffc0\001\002\000\010\006\uffcb" +
    "\025\uffcb\054\uffcb\001\002\000\004\016\253\001\002\000" +
    "\056\002\uffcf\003\uffcf\004\uffcf\007\uffcf\010\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\017\uffcf\024\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\034\uffcf\047\uffcf\057\uffcf\064\uffcf" +
    "\074\uffcf\075\uffcf\077\uffcf\001\002\000\010\006\uffc9\025" +
    "\uffc9\054\uffc9\001\002\000\004\107\256\001\002\000\004" +
    "\072\257\001\002\000\004\053\260\001\002\000\010\006" +
    "\uffc5\025\uffc5\054\uffc5\001\002\000\040\003\302\020\301" +
    "\033\274\041\300\043\276\044\271\053\uffae\060\305\101" +
    "\306\102\304\103\310\104\275\105\303\106\273\110\307" +
    "\001\002\000\040\003\302\020\301\033\274\041\300\043" +
    "\276\044\271\053\uffae\060\305\101\306\102\304\103\310" +
    "\104\275\105\303\106\273\110\307\001\002\000\040\003" +
    "\302\020\301\033\274\041\300\043\276\044\271\053\uffae" +
    "\060\305\101\306\102\304\103\310\104\275\105\303\106" +
    "\273\110\307\001\002\000\040\003\302\020\301\033\274" +
    "\041\300\043\276\044\271\053\uffae\060\305\101\306\102" +
    "\304\103\310\104\275\105\303\106\273\110\307\001\002" +
    "\000\040\003\302\020\301\033\274\041\300\043\276\044" +
    "\271\053\uffae\060\305\101\306\102\304\103\310\104\275" +
    "\105\303\106\273\110\307\001\002\000\040\003\302\020" +
    "\301\033\274\041\300\043\276\044\271\053\uffae\060\305" +
    "\101\306\102\304\103\310\104\275\105\303\106\273\110" +
    "\307\001\002\000\040\003\302\020\301\033\274\041\300" +
    "\043\276\044\271\053\uffae\060\305\101\306\102\304\103" +
    "\310\104\275\105\303\106\273\110\307\001\002\000\004" +
    "\053\347\001\002\000\004\015\345\001\002\000\036\020" +
    "\uffac\033\uffac\041\uffac\043\uffac\044\uffac\053\uffac\060\uffac" +
    "\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\110" +
    "\uffac\001\002\000\004\015\343\001\002\000\004\015\341" +
    "\001\002\000\004\015\337\001\002\000\004\015\335\001" +
    "\002\000\036\020\301\033\274\041\300\043\276\044\271" +
    "\053\uffaf\060\305\101\306\102\304\103\310\104\275\105" +
    "\303\106\273\110\307\001\002\000\004\015\330\001\002" +
    "\000\004\015\326\001\002\000\004\053\325\001\002\000" +
    "\004\015\323\001\002\000\004\015\321\001\002\000\004" +
    "\015\317\001\002\000\004\015\315\001\002\000\004\015" +
    "\313\001\002\000\004\015\311\001\002\000\030\004\004" +
    "\024\027\026\041\027\033\030\052\031\034\032\040\034" +
    "\030\047\044\057\022\074\031\001\002\000\064\020\uffa7" +
    "\033\uffa7\036\065\037\055\040\057\041\uffa7\042\067\043" +
    "\uffa7\044\uffa7\046\062\047\061\050\064\051\066\052\060" +
    "\053\uffa7\054\054\060\uffa7\063\056\101\uffa7\102\uffa7\103" +
    "\uffa7\104\uffa7\105\uffa7\106\uffa7\110\uffa7\001\002\000\030" +
    "\004\004\024\027\026\041\027\033\030\052\031\034\032" +
    "\040\034\030\047\044\057\022\074\031\001\002\000\064" +
    "\020\uffaa\033\uffaa\036\065\037\055\040\057\041\uffaa\042" +
    "\067\043\uffaa\044\uffaa\046\062\047\061\050\064\051\066" +
    "\052\060\053\uffaa\054\054\060\uffaa\063\056\101\uffaa\102" +
    "\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\110\uffaa\001\002" +
    "\000\030\004\004\024\027\026\041\027\033\030\052\031" +
    "\034\032\040\034\030\047\044\057\022\074\031\001\002" +
    "\000\064\020\uffa9\033\uffa9\036\065\037\055\040\057\041" +
    "\uffa9\042\067\043\uffa9\044\uffa9\046\062\047\061\050\064" +
    "\051\066\052\060\053\uffa9\054\054\060\uffa9\063\056\101" +
    "\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\110\uffa9" +
    "\001\002\000\030\004\004\024\027\026\041\027\033\030" +
    "\052\031\034\032\040\034\030\047\044\057\022\074\031" +
    "\001\002\000\064\020\uff9f\033\uff9f\036\065\037\055\040" +
    "\057\041\uff9f\042\067\043\uff9f\044\uff9f\046\062\047\061" +
    "\050\064\051\066\052\060\053\uff9f\054\054\060\uff9f\063" +
    "\056\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f" +
    "\110\uff9f\001\002\000\030\004\004\024\027\026\041\027" +
    "\033\030\052\031\034\032\040\034\030\047\044\057\022" +
    "\074\031\001\002\000\064\020\uffa8\033\uffa8\036\065\037" +
    "\055\040\057\041\uffa8\042\067\043\uffa8\044\uffa8\046\062" +
    "\047\061\050\064\051\066\052\060\053\uffa8\054\054\060" +
    "\uffa8\063\056\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8" +
    "\106\uffa8\110\uffa8\001\002\000\030\004\004\024\027\026" +
    "\041\027\033\030\052\031\034\032\040\034\030\047\044" +
    "\057\022\074\031\001\002\000\064\020\uffa5\033\uffa5\036" +
    "\065\037\055\040\057\041\uffa5\042\067\043\uffa5\044\uffa5" +
    "\046\062\047\061\050\064\051\066\052\060\053\uffa5\054" +
    "\054\060\uffa5\063\056\101\uffa5\102\uffa5\103\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\110\uffa5\001\002\000\036\020\uffab\033" +
    "\uffab\041\uffab\043\uffab\044\uffab\053\uffab\060\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\110\uffab\001" +
    "\002\000\030\004\004\024\027\026\041\027\033\030\052" +
    "\031\034\032\040\034\030\047\044\057\022\074\031\001" +
    "\002\000\064\020\uffa1\033\uffa1\036\065\037\055\040\057" +
    "\041\uffa1\042\067\043\uffa1\044\uffa1\046\062\047\061\050" +
    "\064\051\066\052\060\053\uffa1\054\054\060\uffa1\063\056" +
    "\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\110" +
    "\uffa1\001\002\000\004\021\331\001\002\000\030\004\004" +
    "\024\027\026\041\027\033\030\052\031\034\032\040\034" +
    "\030\047\044\057\022\074\031\001\002\000\034\017\333" +
    "\036\065\037\055\040\057\042\067\046\062\047\061\050" +
    "\064\051\066\052\060\053\063\054\054\063\056\001\002" +
    "\000\036\020\uff9e\033\uff9e\041\uff9e\043\uff9e\044\uff9e\053" +
    "\uff9e\060\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e" +
    "\106\uff9e\110\uff9e\001\002\000\036\020\uffad\033\uffad\041" +
    "\uffad\043\uffad\044\uffad\053\uffad\060\uffad\101\uffad\102\uffad" +
    "\103\uffad\104\uffad\105\uffad\106\uffad\110\uffad\001\002\000" +
    "\030\004\004\024\027\026\041\027\033\030\052\031\034" +
    "\032\040\034\030\047\044\057\022\074\031\001\002\000" +
    "\064\020\uffa3\033\uffa3\036\065\037\055\040\057\041\uffa3" +
    "\042\067\043\uffa3\044\uffa3\046\062\047\061\050\064\051" +
    "\066\052\060\053\uffa3\054\054\060\uffa3\063\056\101\uffa3" +
    "\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\110\uffa3\001" +
    "\002\000\030\004\004\024\027\026\041\027\033\030\052" +
    "\031\034\032\040\034\030\047\044\057\022\074\031\001" +
    "\002\000\064\020\uffa6\033\uffa6\036\065\037\055\040\057" +
    "\041\uffa6\042\067\043\uffa6\044\uffa6\046\062\047\061\050" +
    "\064\051\066\052\060\053\uffa6\054\054\060\uffa6\063\056" +
    "\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\110" +
    "\uffa6\001\002\000\030\004\004\024\027\026\041\027\033" +
    "\030\052\031\034\032\040\034\030\047\044\057\022\074" +
    "\031\001\002\000\064\020\uffa0\033\uffa0\036\065\037\055" +
    "\040\057\041\uffa0\042\067\043\uffa0\044\uffa0\046\062\047" +
    "\061\050\064\051\066\052\060\053\uffa0\054\054\060\uffa0" +
    "\063\056\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106" +
    "\uffa0\110\uffa0\001\002\000\030\004\004\024\027\026\041" +
    "\027\033\030\052\031\034\032\040\034\030\047\044\057" +
    "\022\074\031\001\002\000\064\020\uffa4\033\uffa4\036\065" +
    "\037\055\040\057\041\uffa4\042\067\043\uffa4\044\uffa4\046" +
    "\062\047\061\050\064\051\066\052\060\053\uffa4\054\054" +
    "\060\uffa4\063\056\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\110\uffa4\001\002\000\030\004\004\024\027" +
    "\026\041\027\033\030\052\031\034\032\040\034\030\047" +
    "\044\057\022\074\031\001\002\000\064\020\uffa2\033\uffa2" +
    "\036\065\037\055\040\057\041\uffa2\042\067\043\uffa2\044" +
    "\uffa2\046\062\047\061\050\064\051\066\052\060\053\uffa2" +
    "\054\054\060\uffa2\063\056\101\uffa2\102\uffa2\103\uffa2\104" +
    "\uffa2\105\uffa2\106\uffa2\110\uffa2\001\002\000\012\004\354" +
    "\021\351\032\353\054\350\001\002\000\004\070\365\001" +
    "\002\000\030\004\004\024\027\026\041\027\033\030\052" +
    "\031\034\032\040\034\030\047\044\057\022\074\031\001" +
    "\002\000\004\107\357\001\002\000\004\054\356\001\002" +
    "\000\004\054\355\001\002\000\004\107\uffb2\001\002\000" +
    "\004\107\uffb4\001\002\000\004\055\360\001\002\000\004" +
    "\053\361\001\002\000\010\006\uffb1\025\uffb1\054\uffb1\001" +
    "\002\000\034\017\363\036\065\037\055\040\057\042\067" +
    "\046\062\047\061\050\064\051\066\052\060\053\063\054" +
    "\054\063\056\001\002\000\004\054\364\001\002\000\004" +
    "\107\uffb5\001\002\000\004\053\366\001\002\000\012\004" +
    "\354\021\351\032\353\054\350\001\002\000\004\107\uffb3" +
    "\001\002\000\004\053\371\001\002\000\004\004\372\001" +
    "\002\000\004\054\uffb0\001\002\000\004\053\374\001\002" +
    "\000\004\054\375\001\002\000\006\067\u0102\107\uffbc\001" +
    "\002\000\004\107\377\001\002\000\004\066\u0100\001\002" +
    "\000\004\053\u0101\001\002\000\010\006\uffbe\025\uffbe\054" +
    "\uffbe\001\002\000\004\053\u0103\001\002\000\012\004\354" +
    "\021\351\032\353\054\u0104\001\002\000\016\004\uffb9\021" +
    "\uffb9\032\uffb9\054\uffb9\070\365\107\uffb9\001\002\000\014" +
    "\004\354\021\351\032\353\054\350\107\u010a\001\002\000" +
    "\004\107\u0107\001\002\000\004\070\u0108\001\002\000\004" +
    "\053\u0109\001\002\000\014\004\uffba\021\uffba\032\uffba\054" +
    "\uffba\107\uffba\001\002\000\004\067\u0110\001\002\000\004" +
    "\107\u010c\001\002\000\004\070\u010d\001\002\000\004\053" +
    "\u010e\001\002\000\004\054\u010f\001\002\000\014\004\uffbb" +
    "\021\uffbb\032\uffbb\054\uffbb\107\uffbb\001\002\000\004\053" +
    "\u0111\001\002\000\004\054\u0112\001\002\000\004\107\uffbd" +
    "\001\002\000\004\053\u0114\001\002\000\012\004\354\021" +
    "\351\032\353\054\350\001\002\000\004\107\u0116\001\002" +
    "\000\004\071\u0117\001\002\000\004\053\u0118\001\002\000" +
    "\010\006\uffb7\025\uffb7\054\uffb7\001\002\000\004\053\u011a" +
    "\001\002\000\010\003\241\006\243\054\u011b\001\002\000" +
    "\022\055\267\061\261\065\263\066\265\071\264\072\266" +
    "\073\262\107\uffcc\001\002\000\004\107\u011f\001\002\000" +
    "\006\006\243\054\u011e\001\002\000\022\055\267\061\261" +
    "\065\263\066\265\071\264\072\266\073\262\107\uffcd\001" +
    "\002\000\004\065\u0120\001\002\000\004\053\u0121\001\002" +
    "\000\010\006\uffb8\025\uffb8\054\uffb8\001\002\000\004\053" +
    "\u0123\001\002\000\012\004\354\021\351\032\353\054\350" +
    "\001\002\000\004\107\u0125\001\002\000\004\073\u0126\001" +
    "\002\000\004\053\u0127\001\002\000\010\006\uffb6\025\uffb6" +
    "\054\uffb6\001\002\000\004\053\u0129\001\002\000\010\006" +
    "\uffbf\025\uffbf\054\uffbf\001\002\000\004\053\u012b\001\002" +
    "\000\004\025\u012c\001\002\000\004\016\u012d\001\002\000" +
    "\056\002\uffce\003\uffce\004\uffce\007\uffce\010\uffce\012\uffce" +
    "\013\uffce\014\uffce\017\uffce\024\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\034\uffce\047\uffce\057\uffce\064\uffce" +
    "\074\uffce\075\uffce\077\uffce\001\002\000\030\004\004\024" +
    "\027\026\041\027\033\030\052\031\034\032\040\034\030" +
    "\047\044\057\022\074\031\001\002\000\034\025\u0130\036" +
    "\065\037\055\040\057\042\067\046\062\047\061\050\064" +
    "\051\066\052\060\053\063\054\054\063\056\001\002\000" +
    "\004\021\u0131\001\002\000\052\003\036\004\004\007\032" +
    "\010\005\012\025\013\007\014\017\024\027\026\041\027" +
    "\033\030\043\031\034\032\040\034\030\047\044\057\022" +
    "\064\006\074\031\075\023\077\015\001\002\000\054\003" +
    "\051\004\004\007\032\010\005\012\025\013\007\014\017" +
    "\017\u0133\024\027\026\041\027\033\030\043\031\034\032" +
    "\040\034\030\047\044\057\022\064\006\074\031\075\023" +
    "\077\015\001\002\000\060\002\uffd4\003\uffd4\004\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\017\uffd4" +
    "\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\034" +
    "\uffd4\047\uffd4\057\uffd4\064\uffd4\074\uffd4\075\uffd4\077\uffd4" +
    "\001\002\000\030\004\004\024\027\026\041\027\033\030" +
    "\052\031\034\032\040\034\030\047\044\057\022\074\031" +
    "\001\002\000\034\025\u0136\036\065\037\055\040\057\042" +
    "\067\046\062\047\061\050\064\051\066\052\060\053\063" +
    "\054\054\063\056\001\002\000\004\021\u0137\001\002\000" +
    "\052\003\036\004\004\007\032\010\005\012\025\013\007" +
    "\014\017\024\027\026\041\027\033\030\043\031\034\032" +
    "\040\034\030\047\044\057\022\064\006\074\031\075\023" +
    "\077\015\001\002\000\054\003\051\004\004\007\032\010" +
    "\005\012\025\013\007\014\017\017\u0139\024\027\026\041" +
    "\027\033\030\043\031\034\032\040\034\030\047\044\057" +
    "\022\064\006\074\031\075\023\077\015\001\002\000\056" +
    "\002\uffd9\003\uffd9\004\uffd9\007\uffd9\010\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\017\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\034\uffd9\047\uffd9\057\uffd9\064\uffd9\074" +
    "\uffd9\075\uffd9\077\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\040\013\045\014\044\016\034\017\041\020" +
    "\036\021\013\022\025\024\007\025\011\026\015\027\017" +
    "\030\010\031\023\040\012\056\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\041\241" +
    "\043\243\044\231\045\235\046\232\047\237\050\234\051" +
    "\245\052\244\053\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\203" +
    "\037\204\001\001\000\002\001\001\000\010\057\166\060" +
    "\164\061\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\052\001\001\000\034\016\034\017\041" +
    "\020\036\021\013\022\025\024\007\025\047\026\015\027" +
    "\017\030\010\031\023\040\012\056\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\111" +
    "\001\001\000\002\001\001\000\004\031\105\001\001\000" +
    "\004\031\104\001\001\000\004\031\103\001\001\000\004" +
    "\031\102\001\001\000\004\031\101\001\001\000\004\031" +
    "\077\001\001\000\004\031\075\001\001\000\002\001\001" +
    "\000\004\031\072\001\001\000\004\031\070\001\001\000" +
    "\004\031\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\107\001\001\000\002\001\001\000\004\031" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\014\126\016\034\017\041" +
    "\020\036\021\013\022\025\024\007\025\011\026\015\027" +
    "\017\030\010\031\023\040\012\056\020\001\001\000\034" +
    "\016\034\017\041\020\036\021\013\022\025\024\007\025" +
    "\047\026\015\027\017\030\010\031\023\040\012\056\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\147\016\146\017\141\020\143\021\142\023" +
    "\145\024\136\030\144\040\137\056\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\146\017" +
    "\141\020\143\021\142\023\151\024\136\030\144\040\137" +
    "\056\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\155\033\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\060\170\061\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\014\201\016\034\017\041\020" +
    "\036\021\013\022\025\024\007\025\011\026\015\027\017" +
    "\030\010\031\023\040\012\056\020\001\001\000\002\001" +
    "\001\000\004\031\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\014\177\016\034\017\041\020\036\021" +
    "\013\022\025\024\007\025\011\026\015\027\017\030\010" +
    "\031\023\040\012\056\020\001\001\000\034\016\034\017" +
    "\041\020\036\021\013\022\025\024\007\025\047\026\015" +
    "\027\017\030\010\031\023\040\012\056\020\001\001\000" +
    "\002\001\001\000\034\016\034\017\041\020\036\021\013" +
    "\022\025\024\007\025\047\026\015\027\017\030\010\031" +
    "\023\040\012\056\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\211\001\001\000\006\031\155\033\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\043\243" +
    "\044\231\045\235\046\232\047\237\050\234\051\245\052" +
    "\244\053\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\055\271" +
    "\062\u0127\063\276\001\001\000\010\055\271\062\u0121\063" +
    "\276\001\001\000\010\055\271\062\u0118\063\276\001\001" +
    "\000\010\055\271\062\u0112\063\276\001\001\000\010\055" +
    "\271\062\372\063\276\001\001\000\010\055\271\062\367" +
    "\063\276\001\001\000\010\055\271\062\267\063\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\311\001\001\000" +
    "\002\001\001\000\004\031\313\001\001\000\002\001\001" +
    "\000\004\031\315\001\001\000\002\001\001\000\004\031" +
    "\317\001\001\000\002\001\001\000\004\031\321\001\001" +
    "\000\002\001\001\000\004\031\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\335\001\001\000\002\001\001\000\004\031\337\001" +
    "\001\000\002\001\001\000\004\031\341\001\001\000\002" +
    "\001\001\000\004\031\343\001\001\000\002\001\001\000" +
    "\004\031\345\001\001\000\002\001\001\000\004\032\351" +
    "\001\001\000\002\001\001\000\004\031\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\u0105\035\u0104\001\001\000\002\001\001\000\004" +
    "\032\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\041\u011c\042" +
    "\u011b\043\243\044\231\045\235\046\232\047\237\050\234" +
    "\051\245\052\244\053\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\043\243\044\231\045\235\046\232" +
    "\047\237\050\234\051\245\052\244\053\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\014\u0131\016\034\017\041\020\036\021\013" +
    "\022\025\024\007\025\011\026\015\027\017\030\010\031" +
    "\023\040\012\056\020\001\001\000\034\016\034\017\041" +
    "\020\036\021\013\022\025\024\007\025\047\026\015\027" +
    "\017\030\010\031\023\040\012\056\020\001\001\000\002" +
    "\001\001\000\004\031\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\014\u0137\016\034\017\041\020\036" +
    "\021\013\022\025\024\007\025\011\026\015\027\017\030" +
    "\010\031\023\040\012\056\020\001\001\000\034\016\034" +
    "\017\041\020\036\021\013\022\025\024\007\025\047\026" +
    "\015\027\017\030\010\031\023\040\012\056\020\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoUFE$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoUFE$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoUFE$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Sentencia> resultado = new LinkedList<>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoUFE$actions {




  private final SintacticoUFE parser;

  /** Constructor */
  CUP$SintacticoUFE$actions(SintacticoUFE parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoUFE$do_action_part00000000(
    int                        CUP$SintacticoUFE$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoUFE$parser,
    java.util.Stack            CUP$SintacticoUFE$stack,
    int                        CUP$SintacticoUFE$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoUFE$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoUFE$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> start_val = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoUFE$parser.done_parsing();
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTASENTS 
            {
              LinkedList<Sentencia> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		LinkedList<Sentencia> ls = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            parser.resultado=ls;
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTASENTS ::= LISTASENTS SENTENCIAS 
            {
              LinkedList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> a = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTASENTS ::= SENTENCIAS 
            {
              LinkedList<Sentencia> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTASENTS ::= error tPuntoComa 
            {
              LinkedList<Sentencia> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= COMPONENTE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= DECLARACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT =a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= REASIGNACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Reasignacion a = (Reasignacion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= IMPRIMIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= RENDER 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= RETURN 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= CSS 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS ::= SI 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= MIENTRAS 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= REPETIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CSS ::= E tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new CSS(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("CSS",16, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRIMIR ::= tImprimir tParA LISTAE tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		 RESULT = new Imprimir(b, aright, aleft); 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTAE ::= LISTAE tComa E 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            RESULT = l;
            l.add(a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAE",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTAE ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAE",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= tVar LISTASIGNACION tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Declaracion> a = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		 RESULT= new Declaracion(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("DECLARACION",18, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTASIGNACION ::= LISTASIGNACION tComa ASIGNACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Declaracion> a = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Declaracion b = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		 
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",28, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTASIGNACION ::= ASIGNACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Declaracion b = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		 
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",28, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTASIGNACION ::= error tPuntoComa 
            {
              LinkedList<Declaracion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",28, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= tId tIgual E 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion asignacion = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Declaracion(a,asignacion);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= tId 
            {
              Declaracion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Declaracion(nombre,null);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= tId tIgual tLlaveA LISTAE tLlaveC 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Expresion> ls = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT = new Declaracion(a,(Array)new Array(Simbolo.EnumTipoDato.ARRAY, ls));
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RENDER ::= tRender tParA tMenorQ tId tDivMayorQ tComa tId tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		 RESULT = new Render(nombre,val); 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RENDER",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RENDER ::= error 
            {
              Sentencia RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RENDER",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REASIGNACION ::= tId tIgual E tPuntoComa 
            {
              Reasignacion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Reasignacion(nombre,valor);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("REASIGNACION",30, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMPONENTE ::= tComponent tId tParA tParC tLlaveA LSENTCOMPONENTE tLlaveC 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> lista = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Componente(lista,id);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTE",20, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LSENTCOMPONENTE ::= LSENTCOMPONENTE SENTCOMPONENTE 
            {
              LinkedList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> a = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LSENTCOMPONENTE",11, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LSENTCOMPONENTE ::= SENTCOMPONENTE 
            {
              LinkedList<Sentencia> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LSENTCOMPONENTE",11, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTCOMPONENTE ::= DECLARACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTCOMPONENTE ::= REASIGNACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Reasignacion a = (Reasignacion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTCOMPONENTE ::= IMPRIMIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTCOMPONENTE ::= RETURN 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTCOMPONENTE ::= SI 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTCOMPONENTE ::= MIENTRAS 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTCOMPONENTE ::= REPETIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REPETIR ::= tRepetir tParA E tParC tLlaveA LISTASENTS tLlaveC 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> b = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		
        RESULT = new Repetir((Operacion)a,b);
    
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MIENTRAS ::= tMientras tParA E tParC tLlaveA LISTASENTS tLlaveC 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> b = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		
        RESULT = new Mientras((Operacion)a,b);
    
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SI ::= instruccion_if 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		SubSi a = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Si(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SI ::= instruccion_if instrucciones_elseif 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		SubSi a = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		LinkedList<SubSi> b = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Si(a,b);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SI ::= instruccion_if instrucciones_elseif instruccion_else 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		SubSi a = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<SubSi> b = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		SubSi c = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Si(a,b,c);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SI ::= instruccion_if instruccion_else 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		SubSi a = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		SubSi b = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Si(a,b);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion_if ::= tSi tParA E tParC tLlaveA LISTASENTS tLlaveC 
            {
              SubSi RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> b = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new SubSi((Operacion)a,b);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("instruccion_if",44, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instrucciones_elseif ::= instrucciones_elseif instruccion_elseif 
            {
              LinkedList<SubSi> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<SubSi> a = (LinkedList<SubSi>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		SubSi b = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",45, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instrucciones_elseif ::= instruccion_elseif 
            {
              LinkedList<SubSi> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		SubSi a = (SubSi)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",45, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion_elseif ::= tSiNo tSi tParA E tParC tLlaveA LISTASENTS tLlaveC 
            {
              SubSi RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> b = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new SubSi((Operacion)a,b);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("instruccion_elseif",46, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion_else ::= tSiNo tLlaveA LISTASENTS tLlaveC 
            {
              SubSi RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> a = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new SubSi(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("instruccion_else",47, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETURN ::= tReturn LINSTRUFEX tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<ComponenteJava> lf = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		RESULT=new Return(lf);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RETURN ::= tReturn tReturnMenorQ tId tMayorQ tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		RESULT=new Return(id);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIONOLINSTRUFEX ::= LINSTRUFEX tMenorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<ComponenteJava> a = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SIONOLINSTRUFEX",32, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIONOLINSTRUFEX ::= tMenorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SIONOLINSTRUFEX",32, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LINSTRUFEX ::= LINSTRUFEX INSTRUFEX 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<ComponenteJava> a = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ComponenteJava b = (ComponenteJava)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",31, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LINSTRUFEX ::= INSTRUFEX 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ComponenteJava b = (ComponenteJava)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",31, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LINSTRUFEX ::= error tMayorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",31, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUFEX ::= PANEL 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUFEX ::= BOTON 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUFEX ::= LABEL 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Label a = (Label)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUFEX ::= JTEXTFIELD tMenorQ tDiagonal tTextField tMayorQ 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		TextField a = (TextField)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUFEX ::= JSPINNER 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Spinner a = (Spinner)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRUFEX ::= JLIST 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ListCombo a = (ListCombo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTRUFEX ::= IMAGEN 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INSTRUFEX ::= IDCOMPO 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		IdComponente a = (IdComponente)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IDCOMPO ::= tMenorDiv tId tMayorQ 
            {
              IdComponente RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new IdComponente(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IDCOMPO",37, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IMAGEN ::= tMenorQ tImagen SNLISTAATRIBUTOS tMayorQ 
            {
              Imagen RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		
            RESULT=new Imagen(ls);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IMAGEN",40, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // JLIST ::= tMenorQ tList SNLISTAATRIBUTOS tMayorQ LISTELEMENT tDiagonal tList tMayorQ 
            {
              ListCombo RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		LinkedList<Expresion> le = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
            RESULT = new ListCombo(ls, le);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JLIST",36, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTELEMENT ::= tMenorQ tElement tMayorQ LISTAITEM tDiagonal tElement tMayorQ tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTELEMENT",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTELEMENT ::= tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTELEMENT",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAITEM ::= LISTAITEM LISTA tDiagonal tItem tMayorQ tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",27, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTAITEM ::= LISTA tDiagonal tItem tMayorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",27, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTAITEM ::= tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",27, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PANEL ::= tMenorQ tPanel SNLISTAATRIBUTOS tMayorQ SIONOLINSTRUFEX tDiagonal tPanel tMayorQ 
            {
              Panel RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int lsxleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int lsxright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		LinkedList<ComponenteJava> lsx = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
            RESULT=new Panel(ls,lsx);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("PANEL",33, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // JSPINNER ::= tMenorQ tSpinner SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tSpinner tMayorQ 
            {
              Spinner RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion lt = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Spinner(ls,lt);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JSPINNER",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BOTON ::= tMenorQ tBoton SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tBoton tMayorQ 
            {
              Boton RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion lt = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Boton(ls,lt);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("BOTON",34, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA ::= tLlaveA E tLlaveC tMenorQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA ::= tEntero tMenorQ 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, exp);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA ::= tMenorQ tItem tMayorQ LISTA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA ::= tCadena tMenorQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LABEL ::= tMenorQ tText SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tText tMayorQ 
            {
              Label RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion le = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Label(ls,le);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LABEL",35, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // JTEXTFIELD ::= tMenorQ tTextField SNLISTAATRIBUTOS tMayorQ tCadena 
            {
              TextField RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
        RESULT= new TextField(ls,a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JTEXTFIELD",38, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SNLISTAATRIBUTOS ::= LISTAATRIBUTOS 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SNLISTAATRIBUTOS",48, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SNLISTAATRIBUTOS ::= 
            {
              LinkedList<Atributo> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SNLISTAATRIBUTOS",48, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTAATRIBUTOS ::= LISTAATRIBUTOS ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",49, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTAATRIBUTOS ::= ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",49, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTAATRIBUTOS ::= error tMayorQ 
            {
              LinkedList<Atributo> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",49, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ATRIBUTO ::= tIdEtq tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("id",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ATRIBUTO ::= tX tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("x",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ATRIBUTO ::= tY tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("y",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ATRIBUTO ::= tHeight tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("height",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ATRIBUTO ::= tWidth tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("width",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ATRIBUTO ::= tColor tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("color",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ATRIBUTO ::= tBorder tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("border",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ATRIBUTO ::= tMax tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("max",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ATRIBUTO ::= tMin tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("min",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ATRIBUTO ::= tClass tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("className",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ATRIBUTO ::= tClassname tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("classname",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ATRIBUTO ::= tSrc tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("src",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ATRIBUTO ::= tOnClick tIgual tLlaveA E tLlaveC 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT = new Atributo("onclick",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= E tSuma E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E tMult E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E tDiv E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E tPow E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E tDobleIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E tMenorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E tMayorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E tMayorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E tMenorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E tDifQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E tAnd tAnd E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E tOr tOr E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E tDifQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOT);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E tXor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= tImport tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= tId tCorcheA E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new ArrayPosicion(a,exp,Simbolo.EnumTipoDato.ARRAY);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= tParA E tParC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= tCadenas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= tCaracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CARACTER, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= tDoble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.DOBLE, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= tTrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.BOOLEANO, "true");
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= tFalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.BOOLEANO, "false");
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoUFE$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoUFE$do_action(
    int                        CUP$SintacticoUFE$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoUFE$parser,
    java.util.Stack            CUP$SintacticoUFE$stack,
    int                        CUP$SintacticoUFE$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoUFE$do_action_part00000000(
                               CUP$SintacticoUFE$act_num,
                               CUP$SintacticoUFE$parser,
                               CUP$SintacticoUFE$stack,
                               CUP$SintacticoUFE$top);
    }
}

}
