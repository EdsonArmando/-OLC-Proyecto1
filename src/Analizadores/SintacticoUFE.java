
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Entorno.Simbolo.TipoOperador;
import Expresion.*;
import Sentecia.*;
import Entorno.Simbolo;
import Datos.*;
import IntruccionHTML.*;
import Expresion.Operacion.Tipo_operacion;
import Datos.Atributo.TIPOOPERACION;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoUFE extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symu.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoUFE() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoUFE(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoUFE(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\013\003\000\002\014" +
    "\004\000\002\014\003\000\002\014\004\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\020\004\000\002\017\007\000\002\031\005\000\002\031" +
    "\003\000\002\022\005\000\002\034\005\000\002\034\003" +
    "\000\002\034\004\000\002\035\005\000\002\035\003\000" +
    "\002\025\014\000\002\025\003\000\002\036\006\000\002" +
    "\024\011\000\002\015\004\000\002\015\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\016\011\000\002\026\006\000" +
    "\002\026\011\000\002\040\004\000\002\040\003\000\002" +
    "\037\004\000\002\037\003\000\002\037\004\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\007" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\045\005\000\002\050\006\000\002" +
    "\044\012\000\002\032\012\000\002\032\003\000\002\033" +
    "\010\000\002\033\006\000\002\033\003\000\002\041\012" +
    "\000\002\047\012\000\002\042\012\000\002\030\011\000" +
    "\002\030\004\000\002\030\006\000\002\030\004\000\002" +
    "\043\012\000\002\046\007\000\002\054\003\000\002\054" +
    "\002\000\002\055\004\000\002\055\003\000\002\055\004" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\005\000\002\053\007" +
    "\000\002\027\004\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\006\000\002\027\005\000\002\027\005\000\002\027" +
    "\006\000\002\027\006\000\002\027\006\000\002\027\006" +
    "\000\002\027\006\000\002\027\005\000\002\027\005\000" +
    "\002\027\004\000\002\027\006\000\002\027\003\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\046\003\032\004\005\005\023\006\006\007" +
    "\016\014\004\017\026\021\034\022\030\023\035\024\031" +
    "\025\033\027\025\041\036\051\020\066\027\067\021\071" +
    "\014\001\002\000\032\004\005\014\004\017\026\021\034" +
    "\022\030\023\044\024\031\025\033\027\025\041\036\051" +
    "\020\066\027\001\002\000\076\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\016\uff99\020\uff99\026\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\052" +
    "\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99" +
    "\102\uff99\001\002\000\010\003\212\046\203\101\204\001" +
    "\002\000\052\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\012\ufffb\014\ufffb\017\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\027\ufffb\041\ufffb\051\ufffb\066\ufffb" +
    "\067\ufffb\071\ufffb\001\002\000\052\002\ufff7\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\012\ufff7\014\ufff7\017\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\041" +
    "\ufff7\051\ufff7\066\ufff7\067\ufff7\071\ufff7\001\002\000\052" +
    "\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\012" +
    "\ufffe\014\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\027\ufffe\041\ufffe\051\ufffe\066\ufffe\067\ufffe\071" +
    "\ufffe\001\002\000\052\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\012\ufffa\014\ufffa\017\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa\041\ufffa\051\ufffa" +
    "\066\ufffa\067\ufffa\071\ufffa\001\002\000\052\002\ufff9\003" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\012\ufff9\014\ufff9" +
    "\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\027" +
    "\ufff9\041\ufff9\051\ufff9\066\ufff9\067\ufff9\071\ufff9\001\002" +
    "\000\004\017\170\001\002\000\052\002\ufffc\003\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\014\ufffc\017\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\041" +
    "\ufffc\051\ufffc\066\ufffc\067\ufffc\071\ufffc\001\002\000\006" +
    "\003\160\023\161\001\002\000\052\002\ufff8\003\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\012\ufff8\014\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\041" +
    "\ufff8\051\ufff8\066\ufff8\067\ufff8\071\ufff8\001\002\000\004" +
    "\004\155\001\002\000\004\017\146\001\002\000\034\010" +
    "\052\011\145\030\057\031\047\032\050\034\061\040\054" +
    "\041\053\042\056\043\060\044\051\045\055\046\046\001" +
    "\002\000\004\023\120\001\002\000\052\002\ufff6\003\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\014\ufff6\017" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\027\ufff6" +
    "\041\ufff6\051\ufff6\066\ufff6\067\ufff6\071\ufff6\001\002\000" +
    "\076\010\uff95\011\uff95\012\uff95\013\uff95\016\uff95\020\uff95" +
    "\026\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\052\uff95\073\uff95\074\uff95\075" +
    "\uff95\076\uff95\077\uff95\100\uff95\102\uff95\001\002\000\032" +
    "\004\005\014\004\017\026\021\034\022\030\023\044\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\001\002" +
    "\000\076\010\uff98\011\uff98\012\uff98\013\uff98\016\uff98\020" +
    "\uff98\026\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\052\uff98\073\uff98\074\uff98" +
    "\075\uff98\076\uff98\077\uff98\100\uff98\102\uff98\001\002\000" +
    "\076\010\uff93\011\uff93\012\uff93\013\uff93\016\uff93\020\uff93" +
    "\026\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\052\uff93\073\uff93\074\uff93\075" +
    "\uff93\076\uff93\077\uff93\100\uff93\102\uff93\001\002\000\076" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\016\uff97\020\uff97\026" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\052\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\102\uff97\001\002\000\054\002" +
    "\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\011\115" +
    "\012\uffea\014\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\027\uffea\041\uffea\051\uffea\066\uffea\067\uffea" +
    "\071\uffea\001\002\000\076\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\016\uff96\020\uff96\026\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\052\uff96" +
    "\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\102" +
    "\uff96\001\002\000\076\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\016\uff94\020\uff94\026\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\052\uff94\073" +
    "\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94\102\uff94" +
    "\001\002\000\036\010\112\011\uff9b\015\107\030\uff9b\031" +
    "\uff9b\032\uff9b\034\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\001\002\000\032\004\005\014" +
    "\004\017\026\021\034\022\030\023\044\024\031\025\033" +
    "\027\025\041\036\051\020\066\027\001\002\000\050\002" +
    "\000\003\043\004\005\005\023\006\006\007\016\014\004" +
    "\017\026\021\034\022\030\023\035\024\031\025\033\027" +
    "\025\041\036\051\020\066\027\067\021\071\014\001\002" +
    "\000\004\002\041\001\002\000\004\002\001\001\002\000" +
    "\052\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\012\uffff\014\uffff\017\uffff\021\uffff\022\uffff\023\uffff\024" +
    "\uffff\025\uffff\027\uffff\041\uffff\051\uffff\066\uffff\067\uffff" +
    "\071\uffff\001\002\000\052\002\uffea\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\012\uffea\014\uffea\017\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\027\uffea\041\uffea\051" +
    "\uffea\066\uffea\067\uffea\071\uffea\001\002\000\100\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\015\107\016\uff9b\020\uff9b\026" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\052\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\076\uff9b\077\uff9b\100\uff9b\102\uff9b\001\002\000\076\010" +
    "\052\011\uffad\012\uffad\013\uffad\016\uffad\020\uffad\026\uffad" +
    "\030\057\031\047\032\050\033\uffad\034\061\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\056\043\060\044\051" +
    "\045\055\046\046\052\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\077\uffad\100\uffad\102\uffad\001\002\000\034\004\005" +
    "\010\104\014\004\017\026\021\034\022\030\023\044\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\001\002" +
    "\000\004\031\102\001\002\000\032\004\005\014\004\017" +
    "\026\021\034\022\030\023\044\024\031\025\033\027\025" +
    "\041\036\051\020\066\027\001\002\000\032\004\005\014" +
    "\004\017\026\021\034\022\030\023\044\024\031\025\033" +
    "\027\025\041\036\051\020\066\027\001\002\000\004\010" +
    "\076\001\002\000\032\004\005\014\004\017\026\021\034" +
    "\022\030\023\044\024\031\025\033\027\025\041\036\051" +
    "\020\066\027\001\002\000\032\004\005\014\004\017\026" +
    "\021\034\022\030\023\044\024\031\025\033\027\025\041" +
    "\036\051\020\066\027\001\002\000\034\004\005\010\071" +
    "\014\004\017\026\021\034\022\030\023\044\024\031\025" +
    "\033\027\025\041\036\051\020\066\027\001\002\000\032" +
    "\004\005\014\004\017\026\021\034\022\030\023\044\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\001\002" +
    "\000\004\030\066\001\002\000\032\004\005\014\004\017" +
    "\026\021\034\022\030\023\044\024\031\025\033\027\025" +
    "\041\036\051\020\066\027\001\002\000\034\004\005\010" +
    "\062\014\004\017\026\021\034\022\030\023\044\024\031" +
    "\025\033\027\025\041\036\051\020\066\027\001\002\000" +
    "\032\004\005\014\004\017\026\021\034\022\030\023\044" +
    "\024\031\025\033\027\025\041\036\051\020\066\027\001" +
    "\002\000\076\010\uff9f\011\uff9f\012\uff9f\013\uff9f\016\uff9f" +
    "\020\uff9f\026\uff9f\030\057\031\047\032\050\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\052\uff9f\073\uff9f\074" +
    "\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\102\uff9f\001\002" +
    "\000\076\010\uffa2\011\uffa2\012\uffa2\013\uffa2\016\uffa2\020" +
    "\uffa2\026\uffa2\030\057\031\047\032\050\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\052\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\077\uffa2\100\uffa2\102\uffa2\001\002\000" +
    "\076\010\052\011\uffa9\012\uffa9\013\uffa9\016\uffa9\020\uffa9" +
    "\026\uffa9\030\057\031\047\032\050\033\uffa9\034\061\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\051\045\055\046\046\052\uffa9\073\uffa9\074\uffa9\075" +
    "\uffa9\076\uffa9\077\uffa9\100\uffa9\102\uffa9\001\002\000\032" +
    "\004\005\014\004\017\026\021\034\022\030\023\044\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\001\002" +
    "\000\076\010\uffa0\011\uffa0\012\uffa0\013\uffa0\016\uffa0\020" +
    "\uffa0\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\052\uffa0\073\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\102\uffa0\001\002\000" +
    "\076\010\052\011\uffaa\012\uffaa\013\uffaa\016\uffaa\020\uffaa" +
    "\026\uffaa\030\057\031\047\032\050\033\uffaa\034\061\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\051\045\055\046\046\052\uffaa\073\uffaa\074\uffaa\075" +
    "\uffaa\076\uffaa\077\uffaa\100\uffaa\102\uffaa\001\002\000\032" +
    "\004\005\014\004\017\026\021\034\022\030\023\044\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\001\002" +
    "\000\076\010\uffa5\011\uffa5\012\uffa5\013\uffa5\016\uffa5\020" +
    "\uffa5\026\uffa5\030\057\031\047\032\050\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\052\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\077\uffa5\100\uffa5\102\uffa5\001\002\000" +
    "\076\010\uffa4\011\uffa4\012\uffa4\013\uffa4\016\uffa4\020\uffa4" +
    "\026\uffa4\030\057\031\047\032\050\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\052\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\077\uffa4\100\uffa4\102\uffa4\001\002\000\076" +
    "\010\052\011\uffac\012\uffac\013\uffac\016\uffac\020\uffac\026" +
    "\uffac\030\057\031\047\032\050\033\uffac\034\061\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\056\043\060\044" +
    "\051\045\055\046\046\052\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\077\uffac\100\uffac\102\uffac\001\002\000\076\010" +
    "\052\011\uffab\012\uffab\013\uffab\016\uffab\020\uffab\026\uffab" +
    "\030\057\031\047\032\050\033\uffab\034\061\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\056\043\060\044\051" +
    "\045\055\046\046\052\uffab\073\uffab\074\uffab\075\uffab\076" +
    "\uffab\077\uffab\100\uffab\102\uffab\001\002\000\032\004\005" +
    "\014\004\017\026\021\034\022\030\023\044\024\031\025" +
    "\033\027\025\041\036\051\020\066\027\001\002\000\076" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\016\uffa7\020\uffa7\026" +
    "\uffa7\030\057\031\047\032\050\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\052\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\100\uffa7\102\uffa7\001\002\000\076\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\016\uffa8\020\uffa8\026\uffa8" +
    "\030\057\031\047\032\050\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\052\uffa8\073\uffa8\074\uffa8\075\uffa8\076" +
    "\uffa8\077\uffa8\100\uffa8\102\uffa8\001\002\000\076\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\016\uff9e\020\uff9e\026\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\052\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\100\uff9e\102\uff9e\001\002\000\032\004\005\014" +
    "\004\017\026\021\034\022\030\023\044\024\031\025\033" +
    "\027\025\041\036\051\020\066\027\001\002\000\076\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\016\uffa1\020\uffa1\026\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\052\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\100\uffa1\102\uffa1\001\002\000\032\004\005" +
    "\014\004\017\026\021\034\022\030\023\044\024\031\025" +
    "\033\027\025\041\036\051\020\066\027\001\002\000\076" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\016\uffa6\020\uffa6\026" +
    "\uffa6\030\057\031\047\032\050\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\052\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\102\uffa6\001\002\000\076\010" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\016\uffa3\020\uffa3\026\uffa3" +
    "\030\057\031\047\032\050\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\052\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\100\uffa3\102\uffa3\001\002\000\032\004\005" +
    "\014\004\017\026\021\034\022\030\023\044\024\031\025" +
    "\033\027\025\041\036\051\020\066\027\001\002\000\034" +
    "\010\052\016\111\030\057\031\047\032\050\034\061\040" +
    "\054\041\053\042\056\043\060\044\051\045\055\046\046" +
    "\001\002\000\076\010\uff9c\011\uff9c\012\uff9c\013\uff9c\016" +
    "\uff9c\020\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\052\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\102\uff9c\001" +
    "\002\000\032\004\005\014\004\017\026\021\034\022\030" +
    "\023\044\024\031\025\033\027\025\041\036\051\020\066" +
    "\027\001\002\000\034\010\052\011\114\030\057\031\047" +
    "\032\050\034\061\040\054\041\053\042\056\043\060\044" +
    "\051\045\055\046\046\001\002\000\054\002\uffe9\003\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\012\uffe9\014\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9" +
    "\041\uffe9\051\uffe9\056\uffe9\066\uffe9\067\uffe9\071\uffe9\001" +
    "\002\000\052\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\012\ufffd\014\ufffd\017\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\027\ufffd\041\ufffd\051\ufffd\066\ufffd" +
    "\067\ufffd\071\ufffd\001\002\000\034\010\052\020\117\030" +
    "\057\031\047\032\050\034\061\040\054\041\053\042\056" +
    "\043\060\044\051\045\055\046\046\001\002\000\076\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\016\uff9a\020\uff9a\026\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\052\uff9a\073\uff9a\074\uff9a\075\uff9a\076" +
    "\uff9a\077\uff9a\100\uff9a\102\uff9a\001\002\000\004\017\121" +
    "\001\002\000\004\020\122\001\002\000\004\014\123\001" +
    "\002\000\014\006\006\007\016\023\126\056\127\067\021" +
    "\001\002\000\016\006\uffe5\007\uffe5\012\uffe5\023\uffe5\056" +
    "\uffe5\067\uffe5\001\002\000\016\006\uffe4\007\uffe4\012\uffe4" +
    "\023\uffe4\056\uffe4\067\uffe4\001\002\000\004\010\112\001" +
    "\002\000\004\017\137\001\002\000\016\006\uffe3\007\uffe3" +
    "\012\uffe3\023\uffe3\056\uffe3\067\uffe3\001\002\000\016\006" +
    "\uffe2\007\uffe2\012\uffe2\023\uffe2\056\uffe2\067\uffe2\001\002" +
    "\000\016\006\uffe6\007\uffe6\012\uffe6\023\uffe6\056\uffe6\067" +
    "\uffe6\001\002\000\016\006\uffe1\007\uffe1\012\uffe1\023\uffe1" +
    "\056\uffe1\067\uffe1\001\002\000\016\006\006\007\016\012" +
    "\135\023\126\056\127\067\021\001\002\000\052\002\uffe8" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\014" +
    "\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\027\uffe8\041\uffe8\051\uffe8\066\uffe8\067\uffe8\071\uffe8\001" +
    "\002\000\016\006\uffe7\007\uffe7\012\uffe7\023\uffe7\056\uffe7" +
    "\067\uffe7\001\002\000\032\004\005\014\004\017\026\021" +
    "\034\022\030\023\044\024\031\025\033\027\025\041\036" +
    "\051\020\066\027\001\002\000\034\010\052\020\141\030" +
    "\057\031\047\032\050\034\061\040\054\041\053\042\056" +
    "\043\060\044\051\045\055\046\046\001\002\000\004\014" +
    "\142\001\002\000\046\003\032\004\005\005\023\006\006" +
    "\007\016\014\004\017\026\021\034\022\030\023\035\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\067\021" +
    "\071\014\001\002\000\050\003\043\004\005\005\023\006" +
    "\006\007\016\012\144\014\004\017\026\021\034\022\030" +
    "\023\035\024\031\025\033\027\025\041\036\051\020\066" +
    "\027\067\021\071\014\001\002\000\016\006\uffe0\007\uffe0" +
    "\012\uffe0\023\uffe0\056\uffe0\067\uffe0\001\002\000\052\002" +
    "\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\012\ufff5" +
    "\014\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\027\ufff5\041\ufff5\051\ufff5\066\ufff5\067\ufff5\071\ufff5" +
    "\001\002\000\032\004\005\014\004\017\026\021\034\022" +
    "\030\023\044\024\031\025\033\027\025\041\036\051\020" +
    "\066\027\001\002\000\006\020\152\037\151\001\002\000" +
    "\040\010\052\012\ufff2\020\ufff2\030\057\031\047\032\050" +
    "\034\061\037\ufff2\040\054\041\053\042\056\043\060\044" +
    "\051\045\055\046\046\001\002\000\032\004\005\014\004" +
    "\017\026\021\034\022\030\023\044\024\031\025\033\027" +
    "\025\041\036\051\020\066\027\001\002\000\004\011\153" +
    "\001\002\000\054\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\012\ufff4\014\ufff4\017\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\027\ufff4\041\ufff4\051\ufff4\056" +
    "\ufff4\066\ufff4\067\ufff4\071\ufff4\001\002\000\040\010\052" +
    "\012\ufff3\020\ufff3\030\057\031\047\032\050\034\061\037" +
    "\ufff3\040\054\041\053\042\056\043\060\044\051\045\055" +
    "\046\046\001\002\000\076\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\016\uff9d\020\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\052\uff9d" +
    "\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\102" +
    "\uff9d\001\002\000\006\011\165\037\166\001\002\000\006" +
    "\011\uffef\037\uffef\001\002\000\004\011\164\001\002\000" +
    "\010\010\162\011\uffec\037\uffec\001\002\000\032\004\005" +
    "\014\004\017\026\021\034\022\030\023\044\024\031\025" +
    "\033\027\025\041\036\051\020\066\027\001\002\000\036" +
    "\010\052\011\uffed\030\057\031\047\032\050\034\061\037" +
    "\uffed\040\054\041\053\042\056\043\060\044\051\045\055" +
    "\046\046\001\002\000\006\011\uffee\037\uffee\001\002\000" +
    "\054\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\012\ufff1\014\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\027\ufff1\041\ufff1\051\ufff1\056\ufff1\066\ufff1" +
    "\067\ufff1\071\ufff1\001\002\000\004\023\161\001\002\000" +
    "\006\011\ufff0\037\ufff0\001\002\000\004\046\171\001\002" +
    "\000\004\043\172\001\002\000\004\023\173\001\002\000" +
    "\004\045\174\001\002\000\004\037\175\001\002\000\004" +
    "\023\176\001\002\000\004\020\177\001\002\000\004\011" +
    "\200\001\002\000\052\002\uffeb\003\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\012\uffeb\014\uffeb\017\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\041\uffeb\051\uffeb" +
    "\066\uffeb\067\uffeb\071\uffeb\001\002\000\010\020\uffd7\046" +
    "\uffd7\101\uffd7\001\002\000\010\020\uffd3\046\uffd3\101\uffd3" +
    "\001\002\000\022\047\231\053\223\057\225\060\227\063" +
    "\226\064\230\065\224\101\u0115\001\002\000\004\023\u0113" +
    "\001\002\000\004\046\u010f\001\002\000\010\020\uffda\046" +
    "\uffda\101\uffda\001\002\000\010\020\uffd6\046\uffd6\101\uffd6" +
    "\001\002\000\010\020\uffd1\046\uffd1\101\uffd1\001\002\000" +
    "\010\020\221\046\217\101\204\001\002\000\004\045\216" +
    "\001\002\000\010\020\uffd8\046\uffd8\101\uffd8\001\002\000" +
    "\010\020\uffd2\046\uffd2\101\uffd2\001\002\000\010\020\uffd4" +
    "\046\uffd4\101\uffd4\001\002\000\010\020\uffd9\046\uffd9\101" +
    "\uffd9\001\002\000\020\047\231\053\223\057\225\060\227" +
    "\063\226\064\230\065\224\001\002\000\010\020\uffdb\046" +
    "\uffdb\101\uffdb\001\002\000\004\011\222\001\002\000\054" +
    "\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\012" +
    "\uffdf\014\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\041\uffdf\051\uffdf\056\uffdf\066\uffdf\067" +
    "\uffdf\071\uffdf\001\002\000\040\003\245\013\243\026\235" +
    "\033\242\035\240\036\233\045\uffbe\052\247\073\250\074" +
    "\246\075\251\076\237\077\244\100\236\102\252\001\002" +
    "\000\040\003\245\013\243\026\235\033\242\035\240\036" +
    "\233\045\uffbe\052\247\073\250\074\246\075\251\076\237" +
    "\077\244\100\236\102\252\001\002\000\040\003\245\013" +
    "\243\026\235\033\242\035\240\036\233\045\uffbe\052\247" +
    "\073\250\074\246\075\251\076\237\077\244\100\236\102" +
    "\252\001\002\000\040\003\245\013\243\026\235\033\242" +
    "\035\240\036\233\045\uffbe\052\247\073\250\074\246\075" +
    "\251\076\237\077\244\100\236\102\252\001\002\000\040" +
    "\003\245\013\243\026\235\033\242\035\240\036\233\045" +
    "\uffbe\052\247\073\250\074\246\075\251\076\237\077\244" +
    "\100\236\102\252\001\002\000\040\003\245\013\243\026" +
    "\235\033\242\035\240\036\233\045\uffbe\052\247\073\250" +
    "\074\246\075\251\076\237\077\244\100\236\102\252\001" +
    "\002\000\040\003\245\013\243\026\235\033\242\035\240" +
    "\036\233\045\uffbe\052\247\073\250\074\246\075\251\076" +
    "\237\077\244\100\236\102\252\001\002\000\004\045\311" +
    "\001\002\000\004\010\307\001\002\000\036\013\uffbc\026" +
    "\uffbc\033\uffbc\035\uffbc\036\uffbc\045\uffbc\052\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\102\uffbc\001" +
    "\002\000\004\010\305\001\002\000\004\010\303\001\002" +
    "\000\004\010\301\001\002\000\004\010\277\001\002\000" +
    "\036\013\243\026\235\033\242\035\240\036\233\045\uffbf" +
    "\052\247\073\250\074\246\075\251\076\237\077\244\100" +
    "\236\102\252\001\002\000\004\010\272\001\002\000\004" +
    "\010\270\001\002\000\004\010\266\001\002\000\004\045" +
    "\265\001\002\000\004\010\263\001\002\000\004\010\261" +
    "\001\002\000\004\010\257\001\002\000\004\010\255\001" +
    "\002\000\004\010\253\001\002\000\032\004\005\014\004" +
    "\017\026\021\034\022\030\023\044\024\031\025\033\027" +
    "\025\041\036\051\020\066\027\001\002\000\064\010\052" +
    "\013\uffba\026\uffba\030\057\031\047\032\050\033\uffba\034" +
    "\061\035\uffba\036\uffba\040\054\041\053\042\056\043\060" +
    "\044\051\045\uffba\046\046\052\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\102\uffba\001\002\000\032" +
    "\004\005\014\004\017\026\021\034\022\030\023\044\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\001\002" +
    "\000\064\010\052\013\uffb7\026\uffb7\030\057\031\047\032" +
    "\050\033\uffb7\034\061\035\uffb7\036\uffb7\040\054\041\053" +
    "\042\056\043\060\044\051\045\uffb7\046\046\052\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\102\uffb7" +
    "\001\002\000\032\004\005\014\004\017\026\021\034\022" +
    "\030\023\044\024\031\025\033\027\025\041\036\051\020" +
    "\066\027\001\002\000\064\010\052\013\uffb9\026\uffb9\030" +
    "\057\031\047\032\050\033\uffb9\034\061\035\uffb9\036\uffb9" +
    "\040\054\041\053\042\056\043\060\044\051\045\uffb9\046" +
    "\046\052\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\102\uffb9\001\002\000\032\004\005\014\004\017" +
    "\026\021\034\022\030\023\044\024\031\025\033\027\025" +
    "\041\036\051\020\066\027\001\002\000\064\010\052\013" +
    "\uffaf\026\uffaf\030\057\031\047\032\050\033\uffaf\034\061" +
    "\035\uffaf\036\uffaf\040\054\041\053\042\056\043\060\044" +
    "\051\045\uffaf\046\046\052\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\102\uffaf\001\002\000\032\004" +
    "\005\014\004\017\026\021\034\022\030\023\044\024\031" +
    "\025\033\027\025\041\036\051\020\066\027\001\002\000" +
    "\064\010\052\013\uffb8\026\uffb8\030\057\031\047\032\050" +
    "\033\uffb8\034\061\035\uffb8\036\uffb8\040\054\041\053\042" +
    "\056\043\060\044\051\045\uffb8\046\046\052\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\102\uffb8\001" +
    "\002\000\036\013\uffbb\026\uffbb\033\uffbb\035\uffbb\036\uffbb" +
    "\045\uffbb\052\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077" +
    "\uffbb\100\uffbb\102\uffbb\001\002\000\032\004\005\014\004" +
    "\017\026\021\034\022\030\023\044\024\031\025\033\027" +
    "\025\041\036\051\020\066\027\001\002\000\064\010\052" +
    "\013\uffb5\026\uffb5\030\057\031\047\032\050\033\uffb5\034" +
    "\061\035\uffb5\036\uffb5\040\054\041\053\042\056\043\060" +
    "\044\051\045\uffb5\046\046\052\uffb5\073\uffb5\074\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\100\uffb5\102\uffb5\001\002\000\032" +
    "\004\005\014\004\017\026\021\034\022\030\023\044\024" +
    "\031\025\033\027\025\041\036\051\020\066\027\001\002" +
    "\000\064\010\052\013\uffb1\026\uffb1\030\057\031\047\032" +
    "\050\033\uffb1\034\061\035\uffb1\036\uffb1\040\054\041\053" +
    "\042\056\043\060\044\051\045\uffb1\046\046\052\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\102\uffb1" +
    "\001\002\000\004\014\273\001\002\000\032\004\005\014" +
    "\004\017\026\021\034\022\030\023\044\024\031\025\033" +
    "\027\025\041\036\051\020\066\027\001\002\000\034\010" +
    "\052\012\275\030\057\031\047\032\050\034\061\040\054" +
    "\041\053\042\056\043\060\044\051\045\055\046\046\001" +
    "\002\000\036\013\uffae\026\uffae\033\uffae\035\uffae\036\uffae" +
    "\045\uffae\052\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077" +
    "\uffae\100\uffae\102\uffae\001\002\000\036\013\uffbd\026\uffbd" +
    "\033\uffbd\035\uffbd\036\uffbd\045\uffbd\052\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\102\uffbd\001\002" +
    "\000\032\004\005\014\004\017\026\021\034\022\030\023" +
    "\044\024\031\025\033\027\025\041\036\051\020\066\027" +
    "\001\002\000\064\010\052\013\uffb3\026\uffb3\030\057\031" +
    "\047\032\050\033\uffb3\034\061\035\uffb3\036\uffb3\040\054" +
    "\041\053\042\056\043\060\044\051\045\uffb3\046\046\052" +
    "\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\102\uffb3\001\002\000\032\004\005\014\004\017\026\021" +
    "\034\022\030\023\044\024\031\025\033\027\025\041\036" +
    "\051\020\066\027\001\002\000\064\010\052\013\uffb6\026" +
    "\uffb6\030\057\031\047\032\050\033\uffb6\034\061\035\uffb6" +
    "\036\uffb6\040\054\041\053\042\056\043\060\044\051\045" +
    "\uffb6\046\046\052\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\102\uffb6\001\002\000\032\004\005\014" +
    "\004\017\026\021\034\022\030\023\044\024\031\025\033" +
    "\027\025\041\036\051\020\066\027\001\002\000\064\010" +
    "\052\013\uffb4\026\uffb4\030\057\031\047\032\050\033\uffb4" +
    "\034\061\035\uffb4\036\uffb4\040\054\041\053\042\056\043" +
    "\060\044\051\045\uffb4\046\046\052\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\100\uffb4\102\uffb4\001\002\000" +
    "\032\004\005\014\004\017\026\021\034\022\030\023\044" +
    "\024\031\025\033\027\025\041\036\051\020\066\027\001" +
    "\002\000\064\010\052\013\uffb0\026\uffb0\030\057\031\047" +
    "\032\050\033\uffb0\034\061\035\uffb0\036\uffb0\040\054\041" +
    "\053\042\056\043\060\044\051\045\uffb0\046\046\052\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\102" +
    "\uffb0\001\002\000\032\004\005\014\004\017\026\021\034" +
    "\022\030\023\044\024\031\025\033\027\025\041\036\051" +
    "\020\066\027\001\002\000\064\010\052\013\uffb2\026\uffb2" +
    "\030\057\031\047\032\050\033\uffb2\034\061\035\uffb2\036" +
    "\uffb2\040\054\041\053\042\056\043\060\044\051\045\uffb2" +
    "\046\046\052\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\102\uffb2\001\002\000\012\004\316\014\313" +
    "\025\315\046\312\001\002\000\004\062\332\001\002\000" +
    "\004\023\324\001\002\000\004\101\321\001\002\000\004" +
    "\046\320\001\002\000\004\046\317\001\002\000\004\101" +
    "\uffc2\001\002\000\004\101\uffc4\001\002\000\004\047\322" +
    "\001\002\000\004\045\323\001\002\000\010\020\uffc1\046" +
    "\uffc1\101\uffc1\001\002\000\004\015\325\001\002\000\004" +
    "\025\326\001\002\000\004\016\327\001\002\000\004\012" +
    "\330\001\002\000\004\046\331\001\002\000\004\101\uffc5" +
    "\001\002\000\004\045\333\001\002\000\012\004\316\014" +
    "\313\025\315\046\312\001\002\000\004\101\uffc3\001\002" +
    "\000\004\045\336\001\002\000\004\004\337\001\002\000" +
    "\004\046\uffc0\001\002\000\004\045\341\001\002\000\004" +
    "\046\342\001\002\000\006\061\347\101\uffcc\001\002\000" +
    "\004\101\344\001\002\000\004\060\345\001\002\000\004" +
    "\045\346\001\002\000\010\020\uffce\046\uffce\101\uffce\001" +
    "\002\000\004\045\350\001\002\000\012\004\316\014\313" +
    "\025\315\046\351\001\002\000\016\004\uffc9\014\uffc9\025" +
    "\uffc9\046\uffc9\062\332\101\uffc9\001\002\000\014\004\316" +
    "\014\313\025\315\046\312\101\357\001\002\000\004\101" +
    "\354\001\002\000\004\062\355\001\002\000\004\045\356" +
    "\001\002\000\014\004\uffca\014\uffca\025\uffca\046\uffca\101" +
    "\uffca\001\002\000\004\061\365\001\002\000\004\101\361" +
    "\001\002\000\004\062\362\001\002\000\004\045\363\001" +
    "\002\000\004\046\364\001\002\000\014\004\uffcb\014\uffcb" +
    "\025\uffcb\046\uffcb\101\uffcb\001\002\000\004\045\366\001" +
    "\002\000\004\046\367\001\002\000\004\101\uffcd\001\002" +
    "\000\004\045\371\001\002\000\012\004\316\014\313\025" +
    "\315\046\312\001\002\000\004\101\373\001\002\000\004" +
    "\063\374\001\002\000\004\045\375\001\002\000\010\020" +
    "\uffc7\046\uffc7\101\uffc7\001\002\000\004\045\377\001\002" +
    "\000\010\003\212\046\u0100\101\204\001\002\000\022\047" +
    "\231\053\223\057\225\060\227\063\226\064\230\065\224" +
    "\101\uffdc\001\002\000\004\101\u0104\001\002\000\006\046" +
    "\u0103\101\204\001\002\000\022\047\231\053\223\057\225" +
    "\060\227\063\226\064\230\065\224\101\uffdd\001\002\000" +
    "\004\057\u0105\001\002\000\004\045\u0106\001\002\000\010" +
    "\020\uffc8\046\uffc8\101\uffc8\001\002\000\004\045\u0108\001" +
    "\002\000\012\004\316\014\313\025\315\046\312\001\002" +
    "\000\004\101\u010a\001\002\000\004\065\u010b\001\002\000" +
    "\004\045\u010c\001\002\000\010\020\uffc6\046\uffc6\101\uffc6" +
    "\001\002\000\004\045\u010e\001\002\000\010\020\uffcf\046" +
    "\uffcf\101\uffcf\001\002\000\004\101\u0110\001\002\000\004" +
    "\064\u0111\001\002\000\004\045\u0112\001\002\000\010\020" +
    "\uffd5\046\uffd5\101\uffd5\001\002\000\004\045\u0114\001\002" +
    "\000\010\020\uffd0\046\uffd0\101\uffd0\001\002\000\004\023" +
    "\u0116\001\002\000\004\045\u0117\001\002\000\004\020\u0118" +
    "\001\002\000\004\011\u0119\001\002\000\054\002\uffde\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\012\uffde\014\uffde" +
    "\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\027" +
    "\uffde\041\uffde\051\uffde\056\uffde\066\uffde\067\uffde\071\uffde" +
    "\001\002\000\006\012\u011b\037\151\001\002\000\076\010" +
    "\uff92\011\uff92\012\uff92\013\uff92\016\uff92\020\uff92\026\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\052\uff92\073\uff92\074\uff92\075\uff92\076" +
    "\uff92\077\uff92\100\uff92\102\uff92\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\030\013\037\014\036\017\012\020\023\022" +
    "\006\023\010\024\014\025\016\026\007\027\021\036\011" +
    "\001\001\000\006\027\147\031\u0119\001\001\000\002\001" +
    "\001\000\026\037\210\041\212\042\200\043\206\044\201" +
    "\045\207\046\204\047\214\050\213\051\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\155\035\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\044\001\001\000" +
    "\024\017\012\020\023\022\006\023\041\024\014\025\016" +
    "\026\007\027\021\036\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\104\001\001\000" +
    "\002\001\001\000\004\027\100\001\001\000\004\027\077" +
    "\001\001\000\002\001\001\000\004\027\074\001\001\000" +
    "\004\027\073\001\001\000\004\027\071\001\001\000\004" +
    "\027\067\001\001\000\002\001\001\000\004\027\064\001" +
    "\001\000\004\027\062\001\001\000\004\027\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\102\001\001\000\002\001\001\000\004" +
    "\027\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\133\016\132\017\127\021\131\022\123\026\130" +
    "\036\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\016" +
    "\132\017\127\021\135\022\123\026\130\036\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\142" +
    "\017\012\020\023\022\006\023\010\024\014\025\016\026" +
    "\007\027\021\036\011\001\001\000\024\017\012\020\023" +
    "\022\006\023\041\024\014\025\016\026\007\027\021\036" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\147\031\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\041\212\042\200\043\206" +
    "\044\201\045\207\046\204\047\214\050\213\051\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\233\054\u010c\055\240\001\001\000\010\053\233\054" +
    "\u0106\055\240\001\001\000\010\053\233\054\375\055\240" +
    "\001\001\000\010\053\233\054\367\055\240\001\001\000" +
    "\010\053\233\054\337\055\240\001\001\000\010\053\233" +
    "\054\334\055\240\001\001\000\010\053\233\054\231\055" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\253\001" +
    "\001\000\002\001\001\000\004\027\255\001\001\000\002" +
    "\001\001\000\004\027\257\001\001\000\002\001\001\000" +
    "\004\027\261\001\001\000\002\001\001\000\004\027\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\266\001\001\000\002\001\001\000\004\027\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\277\001\001\000\002\001\001\000\004\027" +
    "\301\001\001\000\002\001\001\000\004\027\303\001\001" +
    "\000\002\001\001\000\004\027\305\001\001\000\002\001" +
    "\001\000\004\027\307\001\001\000\002\001\001\000\004" +
    "\030\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\352\033\351\001\001\000\002\001\001\000\004\030" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\037\u0101\040\u0100" +
    "\041\212\042\200\043\206\044\201\045\207\046\204\047" +
    "\214\050\213\051\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\041\212\042\200\043\206\044\201\045" +
    "\207\046\204\047\214\050\213\051\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoUFE$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoUFE$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoUFE$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Sentencia> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoUFE$actions {




  private final SintacticoUFE parser;

  /** Constructor */
  CUP$SintacticoUFE$actions(SintacticoUFE parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoUFE$do_action_part00000000(
    int                        CUP$SintacticoUFE$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoUFE$parser,
    java.util.Stack            CUP$SintacticoUFE$stack,
    int                        CUP$SintacticoUFE$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoUFE$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoUFE$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> start_val = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoUFE$parser.done_parsing();
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTASENTS 
            {
              LinkedList<Sentencia> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		LinkedList<Sentencia> ls = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            parser.resultado=ls;
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTASENTS ::= LISTASENTS SENTENCIAS 
            {
              LinkedList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> a = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTASENTS ::= SENTENCIAS 
            {
              LinkedList<Sentencia> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTASENTS ::= error tPuntoComa 
            {
              LinkedList<Sentencia> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= COMPONENTE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= DECLARACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT =a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= REASIGNACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Reasignacion a = (Reasignacion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= IMPRIMIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= RENDER 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= RETURN 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= CSS 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CSS ::= E tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new CSS(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("CSS",14, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPRIMIR ::= tImprimir tParA LISTAE tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		 RESULT = new Imprimir(b, aright, aleft); 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAE ::= LISTAE tComa E 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            RESULT = l;
            l.add(a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAE",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAE ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAE",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= tVar LISTASIGNACION tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Declaracion> a = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		 RESULT= new Declaracion(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTASIGNACION ::= LISTASIGNACION tComa ASIGNACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Declaracion> a = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Declaracion b = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		 
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTASIGNACION ::= ASIGNACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Declaracion b = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		 
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTASIGNACION ::= error tPuntoComa 
            {
              LinkedList<Declaracion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= tId tIgual E 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion asignacion = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Declaracion(a,asignacion);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= tId 
            {
              Declaracion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Declaracion(nombre,null);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RENDER ::= tRender tParA tMenorQ tDiv tId tMayorQ tComa tId tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		 RESULT = new Render(nombre,val); 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RENDER",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RENDER ::= error 
            {
              Sentencia RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RENDER",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // REASIGNACION ::= tId tIgual E tPuntoComa 
            {
              Reasignacion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Reasignacion(nombre,valor);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("REASIGNACION",28, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMPONENTE ::= tComponent tId tParA tParC tLlaveA LSENTCOMPONENTE tLlaveC 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> lista = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Componente(lista,id);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTE",18, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LSENTCOMPONENTE ::= LSENTCOMPONENTE SENTCOMPONENTE 
            {
              LinkedList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> a = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LSENTCOMPONENTE",11, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LSENTCOMPONENTE ::= SENTCOMPONENTE 
            {
              LinkedList<Sentencia> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LSENTCOMPONENTE",11, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTCOMPONENTE ::= DECLARACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTCOMPONENTE ::= REASIGNACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Reasignacion a = (Reasignacion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTCOMPONENTE ::= IMPRIMIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTCOMPONENTE ::= RETURN 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTCOMPONENTE ::= SI 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SI ::= tSi tParA E tParC tLlaveA LISTASENTS tLlaveC 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> ls = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		
        RESULT=new Si(a,ls);
    
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN ::= tReturn LINSTRUFEX tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<ComponenteJava> lf = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		RESULT=new Return(lf);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETURN ::= tReturn tMenorQ tDiagonal tId tMayorQ tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		RESULT=new Return(id);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIONOLINSTRUFEX ::= LINSTRUFEX tMenorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<ComponenteJava> a = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SIONOLINSTRUFEX",30, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIONOLINSTRUFEX ::= tMenorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SIONOLINSTRUFEX",30, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINSTRUFEX ::= LINSTRUFEX INSTRUFEX 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<ComponenteJava> a = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ComponenteJava b = (ComponenteJava)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINSTRUFEX ::= INSTRUFEX 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ComponenteJava b = (ComponenteJava)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LINSTRUFEX ::= error tMayorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUFEX ::= PANEL 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUFEX ::= BOTON 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUFEX ::= LABEL 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Label a = (Label)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUFEX ::= JTEXTFIELD tMenorQ tDiagonal tTextField tMayorQ 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		TextField a = (TextField)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUFEX ::= JSPINNER 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Spinner a = (Spinner)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUFEX ::= JLIST 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ListCombo a = (ListCombo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUFEX ::= IMAGEN 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUFEX ::= IDCOMPO 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		IdComponente a = (IdComponente)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IDCOMPO ::= tDiagonal tId tMayorQ 
            {
              IdComponente RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new IdComponente(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IDCOMPO",35, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMAGEN ::= tMenorQ tImagen SNLISTAATRIBUTOS tMayorQ 
            {
              Imagen RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		
            RESULT=new Imagen(ls);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IMAGEN",38, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // JLIST ::= tMenorQ tList SNLISTAATRIBUTOS tMayorQ LISTELEMENT tDiagonal tList tMayorQ 
            {
              ListCombo RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		LinkedList<Expresion> le = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
            RESULT = new ListCombo(ls, le);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JLIST",34, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTELEMENT ::= tMenorQ tElement tMayorQ LISTAITEM tDiagonal tElement tMayorQ tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTELEMENT",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTELEMENT ::= tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTELEMENT",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTAITEM ::= LISTAITEM LISTA tDiagonal tItem tMayorQ tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTAITEM ::= LISTA tDiagonal tItem tMayorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTAITEM ::= tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PANEL ::= tMenorQ tPanel SNLISTAATRIBUTOS tMayorQ SIONOLINSTRUFEX tDiagonal tPanel tMayorQ 
            {
              Panel RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int lsxleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int lsxright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		LinkedList<ComponenteJava> lsx = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
            RESULT=new Panel(ls,lsx);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("PANEL",31, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // JSPINNER ::= tMenorQ tSpinner SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tSpinner tMayorQ 
            {
              Spinner RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion lt = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Spinner(ls,lt);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JSPINNER",37, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOTON ::= tMenorQ tBoton SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tBoton tMayorQ 
            {
              Boton RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion lt = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Boton(ls,lt);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA ::= tLlaveA tId tCorcheA tEntero tCorcheC tLlaveC tMenorQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		RESULT=new ArrayPosicion(a,exp,Simbolo.EnumTipoDato.ARRAY);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA ::= tEntero tMenorQ 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, exp);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA ::= tMenorQ tItem tMayorQ LISTA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTA ::= tCadena tMenorQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LABEL ::= tMenorQ tText SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tText tMayorQ 
            {
              Label RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion le = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Label(ls,le);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LABEL",33, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // JTEXTFIELD ::= tMenorQ tTextField SNLISTAATRIBUTOS tMayorQ tCadena 
            {
              TextField RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
        RESULT= new TextField(ls,a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JTEXTFIELD",36, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SNLISTAATRIBUTOS ::= LISTAATRIBUTOS 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SNLISTAATRIBUTOS",42, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SNLISTAATRIBUTOS ::= 
            {
              LinkedList<Atributo> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SNLISTAATRIBUTOS",42, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTAATRIBUTOS ::= LISTAATRIBUTOS ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTAATRIBUTOS ::= ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAATRIBUTOS ::= error tMayorQ 
            {
              LinkedList<Atributo> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATRIBUTO ::= tIdEtq tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("id",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATRIBUTO ::= tX tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("x",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATRIBUTO ::= tY tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("y",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATRIBUTO ::= tHeight tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("height",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATRIBUTO ::= tWidth tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("width",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ATRIBUTO ::= tColor tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("color",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ATRIBUTO ::= tBorder tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("border",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ATRIBUTO ::= tMax tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("max",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ATRIBUTO ::= tMin tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("min",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ATRIBUTO ::= tClass tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("className",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ATRIBUTO ::= tClassname tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("classname",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATRIBUTO ::= tSrc tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("src",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATRIBUTO ::= tOnClick tIgual tLlaveA E tLlaveC 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT = new Atributo("onclick",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E tSuma E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E tMult E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E tDiv E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E tPow E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E tIgual tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= E tMenorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E tMayorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= E tMayorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E tMenorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E tDifQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= E tAnd tAnd E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= E tOr tOr E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= E tDifQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOT);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= E tXor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= tImport tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= tId tCorcheA E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new ArrayPosicion(a,exp,Simbolo.EnumTipoDato.ARRAY);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= tParA E tParC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= tCadenas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= tCaracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CARACTER, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= tDoble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.DOBLE, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= tTrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.BOOLEANO, "true");
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= tFalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.BOOLEANO, "false");
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= tLlaveA LISTAE tLlaveC 
            {
              Expresion RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Expresion> ls = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Array(Simbolo.EnumTipoDato.ARRAY, ls);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoUFE$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoUFE$do_action(
    int                        CUP$SintacticoUFE$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoUFE$parser,
    java.util.Stack            CUP$SintacticoUFE$stack,
    int                        CUP$SintacticoUFE$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoUFE$do_action_part00000000(
                               CUP$SintacticoUFE$act_num,
                               CUP$SintacticoUFE$parser,
                               CUP$SintacticoUFE$stack,
                               CUP$SintacticoUFE$top);
    }
}

}
