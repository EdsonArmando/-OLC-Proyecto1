
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Entorno.Simbolo.TipoOperador;
import Expresion.*;
import Sentecia.*;
import Entorno.Simbolo;
import Datos.*;
import IntruccionHTML.*;
import Datos.Atributo.TIPOOPERACION;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoUFE extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symu.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoUFE() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoUFE(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoUFE(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\013\003\000\002\014" +
    "\004\000\002\014\003\000\002\014\004\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\020\004\000\002\017\007\000\002\031\005\000\002\031" +
    "\003\000\002\022\005\000\002\034\005\000\002\034\003" +
    "\000\002\034\004\000\002\035\005\000\002\035\003\000" +
    "\002\025\014\000\002\025\003\000\002\036\006\000\002" +
    "\024\011\000\002\015\004\000\002\015\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\016\013\000\002\026\006\000" +
    "\002\026\011\000\002\040\004\000\002\040\003\000\002" +
    "\037\004\000\002\037\003\000\002\037\004\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\045\005\000\002\050\006\000\002" +
    "\044\012\000\002\032\012\000\002\032\003\000\002\033" +
    "\010\000\002\033\006\000\002\033\003\000\002\041\012" +
    "\000\002\047\012\000\002\042\012\000\002\030\011\000" +
    "\002\030\004\000\002\030\006\000\002\030\004\000\002" +
    "\043\012\000\002\046\013\000\002\054\003\000\002\054" +
    "\002\000\002\055\004\000\002\055\003\000\002\055\004" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\007\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\004\000\002\027\006\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\044\003\032\004\005\005\023\006\006\007" +
    "\016\013\004\016\026\020\034\021\030\022\035\023\031" +
    "\024\033\026\025\043\020\061\027\062\021\064\014\001" +
    "\002\000\030\004\005\013\004\016\026\020\034\021\030" +
    "\022\045\023\031\024\033\026\025\043\020\061\027\001" +
    "\002\000\064\011\uffa3\012\uffa3\015\uffa3\017\uffa3\025\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\045\uffa3\050\uffa3" +
    "\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\075" +
    "\uffa3\001\002\000\010\003\166\041\157\074\160\001\002" +
    "\000\050\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\012\ufffb\013\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\026\ufffb\043\ufffb\061\ufffb\062\ufffb\064" +
    "\ufffb\001\002\000\050\002\ufff7\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\012\ufff7\013\ufff7\016\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7\043\ufff7\061\ufff7" +
    "\062\ufff7\064\ufff7\001\002\000\050\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe\013\ufffe\016\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\043" +
    "\ufffe\061\ufffe\062\ufffe\064\ufffe\001\002\000\050\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\012\ufffa\013" +
    "\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\026\ufffa\043\ufffa\061\ufffa\062\ufffa\064\ufffa\001\002\000" +
    "\050\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\012\ufff9\013\ufff9\016\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\026\ufff9\043\ufff9\061\ufff9\062\ufff9\064\ufff9" +
    "\001\002\000\004\016\144\001\002\000\050\002\ufffc\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\013\ufffc" +
    "\016\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026" +
    "\ufffc\043\ufffc\061\ufffc\062\ufffc\064\ufffc\001\002\000\006" +
    "\003\134\022\135\001\002\000\050\002\ufff8\003\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\012\ufff8\013\ufff8\016\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\043" +
    "\ufff8\061\ufff8\062\ufff8\064\ufff8\001\002\000\004\004\131" +
    "\001\002\000\004\016\122\001\002\000\016\011\121\033" +
    "\047\034\050\035\053\036\054\037\052\001\002\000\004" +
    "\022\067\001\002\000\050\002\ufff6\003\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\012\ufff6\013\ufff6\016\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\026\ufff6\043\ufff6\061" +
    "\ufff6\062\ufff6\064\ufff6\001\002\000\064\011\uff9f\012\uff9f" +
    "\015\uff9f\017\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\045\uff9f\050\uff9f\066\uff9f\067\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\075\uff9f\001\002\000\030\004\005" +
    "\013\004\016\026\020\034\021\030\022\045\023\031\024" +
    "\033\026\025\043\020\061\027\001\002\000\064\011\uffa2" +
    "\012\uffa2\015\uffa2\017\uffa2\025\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\045\uffa2\050\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\075\uffa2\001\002\000\064" +
    "\011\uff9d\012\uff9d\015\uff9d\017\uff9d\025\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\045\uff9d\050\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\075\uff9d\001\002" +
    "\000\064\011\uffa1\012\uffa1\015\uffa1\017\uffa1\025\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\045\uffa1\050\uffa1\066" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\075\uffa1" +
    "\001\002\000\052\002\uffea\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\011\064\012\uffea\013\uffea\016\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\043\uffea\061" +
    "\uffea\062\uffea\064\uffea\001\002\000\064\011\uffa0\012\uffa0" +
    "\015\uffa0\017\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\045\uffa0\050\uffa0\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\075\uffa0\001\002\000\064\011\uff9e" +
    "\012\uff9e\015\uff9e\017\uff9e\025\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\045\uff9e\050\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\075\uff9e\001\002\000\022" +
    "\010\044\011\uffa4\014\043\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\001\002\000\046\002\000\003\042\004\005" +
    "\005\023\006\006\007\016\013\004\016\026\020\034\021" +
    "\030\022\035\023\031\024\033\026\025\043\020\061\027" +
    "\062\021\064\014\001\002\000\004\002\040\001\002\000" +
    "\004\002\001\001\002\000\050\002\uffff\003\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\012\uffff\013\uffff\016\uffff\020" +
    "\uffff\021\uffff\022\uffff\023\uffff\024\uffff\026\uffff\043\uffff" +
    "\061\uffff\062\uffff\064\uffff\001\002\000\050\002\uffea\003" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\012\uffea\013\uffea" +
    "\016\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026" +
    "\uffea\043\uffea\061\uffea\062\uffea\064\uffea\001\002\000\030" +
    "\004\005\013\004\016\026\020\034\021\030\022\045\023" +
    "\031\024\033\026\025\043\020\061\027\001\002\000\030" +
    "\004\005\013\004\016\026\020\034\021\030\022\045\023" +
    "\031\024\033\026\025\043\020\061\027\001\002\000\066" +
    "\011\uffa4\012\uffa4\014\043\015\uffa4\017\uffa4\025\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\045\uffa4\050\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\075\uffa4" +
    "\001\002\000\016\011\051\033\047\034\050\035\053\036" +
    "\054\037\052\001\002\000\030\004\005\013\004\016\026" +
    "\020\034\021\030\022\045\023\031\024\033\026\025\043" +
    "\020\061\027\001\002\000\030\004\005\013\004\016\026" +
    "\020\034\021\030\022\045\023\031\024\033\026\025\043" +
    "\020\061\027\001\002\000\052\002\uffe9\003\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\012\uffe9\013\uffe9\016\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\043\uffe9" +
    "\051\uffe9\061\uffe9\062\uffe9\064\uffe9\001\002\000\030\004" +
    "\005\013\004\016\026\020\034\021\030\022\045\023\031" +
    "\024\033\026\025\043\020\061\027\001\002\000\030\004" +
    "\005\013\004\016\026\020\034\021\030\022\045\023\031" +
    "\024\033\026\025\043\020\061\027\001\002\000\030\004" +
    "\005\013\004\016\026\020\034\021\030\022\045\023\031" +
    "\024\033\026\025\043\020\061\027\001\002\000\064\011" +
    "\uffa8\012\uffa8\015\uffa8\017\uffa8\025\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\052\040\uffa8\041\uffa8\045\uffa8\050\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\073\uffa8\075\uffa8\001\002\000" +
    "\064\011\uffa9\012\uffa9\015\uffa9\017\uffa9\025\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\052\040\uffa9\041\uffa9\045\uffa9\050\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\075\uffa9\001" +
    "\002\000\064\011\uffa7\012\uffa7\015\uffa7\017\uffa7\025\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\045\uffa7\050\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\075" +
    "\uffa7\001\002\000\064\011\uffaa\012\uffaa\015\uffaa\017\uffaa" +
    "\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\053\036\054\037\052\040\uffaa\041\uffaa\045\uffaa" +
    "\050\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\075\uffaa\001\002\000\064\011\uffab\012\uffab\015\uffab" +
    "\017\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\053\036\054\037\052\040\uffab\041\uffab" +
    "\045\uffab\050\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\075\uffab\001\002\000\016\015\063\033\047" +
    "\034\050\035\053\036\054\037\052\001\002\000\064\011" +
    "\uffa5\012\uffa5\015\uffa5\017\uffa5\025\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\045\uffa5\050\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\075\uffa5\001\002\000" +
    "\050\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\012\ufffd\013\ufffd\016\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\026\ufffd\043\ufffd\061\ufffd\062\ufffd\064\ufffd" +
    "\001\002\000\016\017\066\033\047\034\050\035\053\036" +
    "\054\037\052\001\002\000\064\011\uff9c\012\uff9c\015\uff9c" +
    "\017\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\045\uff9c\050\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072" +
    "\uff9c\073\uff9c\075\uff9c\001\002\000\004\016\070\001\002" +
    "\000\004\017\071\001\002\000\004\013\072\001\002\000" +
    "\014\006\006\007\016\022\075\051\076\062\021\001\002" +
    "\000\016\006\uffe5\007\uffe5\012\uffe5\022\uffe5\051\uffe5\062" +
    "\uffe5\001\002\000\016\006\uffe4\007\uffe4\012\uffe4\022\uffe4" +
    "\051\uffe4\062\uffe4\001\002\000\004\010\044\001\002\000" +
    "\004\016\106\001\002\000\016\006\uffe3\007\uffe3\012\uffe3" +
    "\022\uffe3\051\uffe3\062\uffe3\001\002\000\016\006\uffe2\007" +
    "\uffe2\012\uffe2\022\uffe2\051\uffe2\062\uffe2\001\002\000\016" +
    "\006\uffe6\007\uffe6\012\uffe6\022\uffe6\051\uffe6\062\uffe6\001" +
    "\002\000\016\006\uffe1\007\uffe1\012\uffe1\022\uffe1\051\uffe1" +
    "\062\uffe1\001\002\000\016\006\006\007\016\012\104\022" +
    "\075\051\076\062\021\001\002\000\050\002\uffe8\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\016" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\026\uffe8" +
    "\043\uffe8\061\uffe8\062\uffe8\064\uffe8\001\002\000\016\006" +
    "\uffe7\007\uffe7\012\uffe7\022\uffe7\051\uffe7\062\uffe7\001\002" +
    "\000\030\004\005\013\004\016\026\020\034\021\030\022" +
    "\045\023\031\024\033\026\025\043\020\061\027\001\002" +
    "\000\022\033\047\034\050\035\053\036\054\037\052\040" +
    "\113\041\110\050\111\001\002\000\030\004\uffac\013\uffac" +
    "\016\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026" +
    "\uffac\043\uffac\061\uffac\001\002\000\030\004\uffae\013\uffae" +
    "\016\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026" +
    "\uffae\043\uffae\061\uffae\001\002\000\030\004\005\013\004" +
    "\016\026\020\034\021\030\022\045\023\031\024\033\026" +
    "\025\043\020\061\027\001\002\000\030\004\uffad\013\uffad" +
    "\016\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026" +
    "\uffad\043\uffad\061\uffad\001\002\000\016\017\115\033\047" +
    "\034\050\035\053\036\054\037\052\001\002\000\004\013" +
    "\116\001\002\000\044\003\032\004\005\005\023\006\006" +
    "\007\016\013\004\016\026\020\034\021\030\022\035\023" +
    "\031\024\033\026\025\043\020\061\027\062\021\064\014" +
    "\001\002\000\046\003\042\004\005\005\023\006\006\007" +
    "\016\012\120\013\004\016\026\020\034\021\030\022\035" +
    "\023\031\024\033\026\025\043\020\061\027\062\021\064" +
    "\014\001\002\000\016\006\uffe0\007\uffe0\012\uffe0\022\uffe0" +
    "\051\uffe0\062\uffe0\001\002\000\050\002\ufff5\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\012\ufff5\013\ufff5\016\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\026\ufff5\043" +
    "\ufff5\061\ufff5\062\ufff5\064\ufff5\001\002\000\030\004\005" +
    "\013\004\016\026\020\034\021\030\022\045\023\031\024" +
    "\033\026\025\043\020\061\027\001\002\000\006\017\126" +
    "\032\125\001\002\000\024\012\ufff2\017\ufff2\032\ufff2\033" +
    "\047\034\050\035\053\036\054\037\052\041\ufff2\001\002" +
    "\000\030\004\005\013\004\016\026\020\034\021\030\022" +
    "\045\023\031\024\033\026\025\043\020\061\027\001\002" +
    "\000\004\011\127\001\002\000\052\002\ufff4\003\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\012\ufff4\013\ufff4\016\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4\043" +
    "\ufff4\051\ufff4\061\ufff4\062\ufff4\064\ufff4\001\002\000\024" +
    "\012\ufff3\017\ufff3\032\ufff3\033\047\034\050\035\053\036" +
    "\054\037\052\041\ufff3\001\002\000\064\011\uffa6\012\uffa6" +
    "\015\uffa6\017\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\045\uffa6\050\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\075\uffa6\001\002\000\006\011\141" +
    "\032\142\001\002\000\006\011\uffef\032\uffef\001\002\000" +
    "\004\011\140\001\002\000\010\010\136\011\uffec\032\uffec" +
    "\001\002\000\030\004\005\013\004\016\026\020\034\021" +
    "\030\022\045\023\031\024\033\026\025\043\020\061\027" +
    "\001\002\000\020\011\uffed\032\uffed\033\047\034\050\035" +
    "\053\036\054\037\052\001\002\000\006\011\uffee\032\uffee" +
    "\001\002\000\052\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\012\ufff1\013\ufff1\016\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\026\ufff1\043\ufff1\051\ufff1\061" +
    "\ufff1\062\ufff1\064\ufff1\001\002\000\004\022\135\001\002" +
    "\000\006\011\ufff0\032\ufff0\001\002\000\004\041\145\001" +
    "\002\000\004\036\146\001\002\000\004\022\147\001\002" +
    "\000\004\040\150\001\002\000\004\032\151\001\002\000" +
    "\004\022\152\001\002\000\004\017\153\001\002\000\004" +
    "\011\154\001\002\000\050\002\uffeb\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\012\uffeb\013\uffeb\016\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb\043\uffeb\061" +
    "\uffeb\062\uffeb\064\uffeb\001\002\000\010\017\uffd7\041\uffd7" +
    "\074\uffd7\001\002\000\010\017\uffd3\041\uffd3\074\uffd3\001" +
    "\002\000\022\042\205\046\177\052\201\053\203\056\202" +
    "\057\204\060\200\074\376\001\002\000\004\022\374\001" +
    "\002\000\010\017\uffd5\041\uffd5\074\uffd5\001\002\000\010" +
    "\017\uffda\041\uffda\074\uffda\001\002\000\010\017\uffd6\041" +
    "\uffd6\074\uffd6\001\002\000\010\017\uffd1\041\uffd1\074\uffd1" +
    "\001\002\000\010\017\175\041\173\074\160\001\002\000" +
    "\004\040\172\001\002\000\010\017\uffd8\041\uffd8\074\uffd8" +
    "\001\002\000\010\017\uffd2\041\uffd2\074\uffd2\001\002\000" +
    "\010\017\uffd4\041\uffd4\074\uffd4\001\002\000\010\017\uffd9" +
    "\041\uffd9\074\uffd9\001\002\000\020\042\205\046\177\052" +
    "\201\053\203\056\202\057\204\060\200\001\002\000\010" +
    "\017\uffdb\041\uffdb\074\uffdb\001\002\000\004\011\176\001" +
    "\002\000\052\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\012\uffdf\013\uffdf\016\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\026\uffdf\043\uffdf\051\uffdf\061\uffdf" +
    "\062\uffdf\064\uffdf\001\002\000\036\003\220\025\212\027" +
    "\216\030\214\031\207\040\uffbe\045\222\066\223\067\221" +
    "\070\224\071\213\072\217\073\211\075\225\001\002\000" +
    "\036\003\220\025\212\027\216\030\214\031\207\040\uffbe" +
    "\045\222\066\223\067\221\070\224\071\213\072\217\073" +
    "\211\075\225\001\002\000\036\003\220\025\212\027\216" +
    "\030\214\031\207\040\uffbe\045\222\066\223\067\221\070" +
    "\224\071\213\072\217\073\211\075\225\001\002\000\036" +
    "\003\220\025\212\027\216\030\214\031\207\040\uffbe\045" +
    "\222\066\223\067\221\070\224\071\213\072\217\073\211" +
    "\075\225\001\002\000\036\003\220\025\212\027\216\030" +
    "\214\031\207\040\uffbe\045\222\066\223\067\221\070\224" +
    "\071\213\072\217\073\211\075\225\001\002\000\036\003" +
    "\220\025\212\027\216\030\214\031\207\040\uffbe\045\222" +
    "\066\223\067\221\070\224\071\213\072\217\073\211\075" +
    "\225\001\002\000\036\003\220\025\212\027\216\030\214" +
    "\031\207\040\uffbe\045\222\066\223\067\221\070\224\071" +
    "\213\072\217\073\211\075\225\001\002\000\004\040\262" +
    "\001\002\000\004\010\260\001\002\000\034\025\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\040\uffbc\045\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\072\uffbc\073\uffbc\075\uffbc\001\002\000" +
    "\004\010\256\001\002\000\004\010\254\001\002\000\004" +
    "\010\252\001\002\000\004\010\250\001\002\000\034\025" +
    "\212\027\216\030\214\031\207\040\uffbf\045\222\066\223" +
    "\067\221\070\224\071\213\072\217\073\211\075\225\001" +
    "\002\000\004\010\243\001\002\000\004\010\241\001\002" +
    "\000\004\040\240\001\002\000\004\010\236\001\002\000" +
    "\004\010\234\001\002\000\004\010\232\001\002\000\004" +
    "\010\230\001\002\000\004\010\226\001\002\000\030\004" +
    "\005\013\004\016\026\020\034\021\030\022\045\023\031" +
    "\024\033\026\025\043\020\061\027\001\002\000\046\025" +
    "\uffba\027\uffba\030\uffba\031\uffba\033\047\034\050\035\053" +
    "\036\054\037\052\040\uffba\045\uffba\066\uffba\067\uffba\070" +
    "\uffba\071\uffba\072\uffba\073\uffba\075\uffba\001\002\000\030" +
    "\004\005\013\004\016\026\020\034\021\030\022\045\023" +
    "\031\024\033\026\025\043\020\061\027\001\002\000\046" +
    "\025\uffb7\027\uffb7\030\uffb7\031\uffb7\033\047\034\050\035" +
    "\053\036\054\037\052\040\uffb7\045\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\075\uffb7\001\002\000" +
    "\030\004\005\013\004\016\026\020\034\021\030\022\045" +
    "\023\031\024\033\026\025\043\020\061\027\001\002\000" +
    "\046\025\uffb9\027\uffb9\030\uffb9\031\uffb9\033\047\034\050" +
    "\035\053\036\054\037\052\040\uffb9\045\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\075\uffb9\001\002" +
    "\000\030\004\005\013\004\016\026\020\034\021\030\022" +
    "\045\023\031\024\033\026\025\043\020\061\027\001\002" +
    "\000\046\025\uffb0\027\uffb0\030\uffb0\031\uffb0\033\047\034" +
    "\050\035\053\036\054\037\052\040\uffb0\045\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\075\uffb0\001" +
    "\002\000\030\004\005\013\004\016\026\020\034\021\030" +
    "\022\045\023\031\024\033\026\025\043\020\061\027\001" +
    "\002\000\046\025\uffb8\027\uffb8\030\uffb8\031\uffb8\033\047" +
    "\034\050\035\053\036\054\037\052\040\uffb8\045\uffb8\066" +
    "\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\075\uffb8" +
    "\001\002\000\034\025\uffbb\027\uffbb\030\uffbb\031\uffbb\040" +
    "\uffbb\045\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\075\uffbb\001\002\000\030\004\005\013\004\016" +
    "\026\020\034\021\030\022\045\023\031\024\033\026\025" +
    "\043\020\061\027\001\002\000\046\025\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\033\047\034\050\035\053\036\054\037\052" +
    "\040\uffb5\045\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\075\uffb5\001\002\000\004\013\244\001\002" +
    "\000\030\004\005\013\004\016\026\020\034\021\030\022" +
    "\045\023\031\024\033\026\025\043\020\061\027\001\002" +
    "\000\016\012\246\033\047\034\050\035\053\036\054\037" +
    "\052\001\002\000\034\025\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\040\uffaf\045\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\075\uffaf\001\002\000\034\025\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\040\uffbd\045\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\075\uffbd\001\002\000\030" +
    "\004\005\013\004\016\026\020\034\021\030\022\045\023" +
    "\031\024\033\026\025\043\020\061\027\001\002\000\046" +
    "\025\uffb3\027\uffb3\030\uffb3\031\uffb3\033\047\034\050\035" +
    "\053\036\054\037\052\040\uffb3\045\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\073\uffb3\075\uffb3\001\002\000" +
    "\030\004\005\013\004\016\026\020\034\021\030\022\045" +
    "\023\031\024\033\026\025\043\020\061\027\001\002\000" +
    "\046\025\uffb6\027\uffb6\030\uffb6\031\uffb6\033\047\034\050" +
    "\035\053\036\054\037\052\040\uffb6\045\uffb6\066\uffb6\067" +
    "\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\075\uffb6\001\002" +
    "\000\030\004\005\013\004\016\026\020\034\021\030\022" +
    "\045\023\031\024\033\026\025\043\020\061\027\001\002" +
    "\000\046\025\uffb1\027\uffb1\030\uffb1\031\uffb1\033\047\034" +
    "\050\035\053\036\054\037\052\040\uffb1\045\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\075\uffb1\001" +
    "\002\000\030\004\005\013\004\016\026\020\034\021\030" +
    "\022\045\023\031\024\033\026\025\043\020\061\027\001" +
    "\002\000\046\025\uffb4\027\uffb4\030\uffb4\031\uffb4\033\047" +
    "\034\050\035\053\036\054\037\052\040\uffb4\045\uffb4\066" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\075\uffb4" +
    "\001\002\000\030\004\005\013\004\016\026\020\034\021" +
    "\030\022\045\023\031\024\033\026\025\043\020\061\027" +
    "\001\002\000\046\025\uffb2\027\uffb2\030\uffb2\031\uffb2\033" +
    "\047\034\050\035\053\036\054\037\052\040\uffb2\045\uffb2" +
    "\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\075" +
    "\uffb2\001\002\000\012\004\267\013\264\024\266\041\263" +
    "\001\002\000\004\055\303\001\002\000\004\022\275\001" +
    "\002\000\004\074\272\001\002\000\004\041\271\001\002" +
    "\000\004\041\270\001\002\000\004\074\uffc2\001\002\000" +
    "\004\074\uffc4\001\002\000\004\042\273\001\002\000\004" +
    "\040\274\001\002\000\010\017\uffc1\041\uffc1\074\uffc1\001" +
    "\002\000\004\014\276\001\002\000\004\024\277\001\002" +
    "\000\004\015\300\001\002\000\004\012\301\001\002\000" +
    "\004\041\302\001\002\000\004\074\uffc5\001\002\000\004" +
    "\040\304\001\002\000\012\004\267\013\264\024\266\041" +
    "\263\001\002\000\004\074\uffc3\001\002\000\004\040\307" +
    "\001\002\000\030\004\005\013\004\016\026\020\034\021" +
    "\030\022\045\023\031\024\033\026\025\043\020\061\027" +
    "\001\002\000\006\032\125\041\311\001\002\000\004\074" +
    "\312\001\002\000\004\057\313\001\002\000\004\040\314" +
    "\001\002\000\010\017\uffc0\041\uffc0\074\uffc0\001\002\000" +
    "\004\040\316\001\002\000\004\041\317\001\002\000\006" +
    "\054\324\074\uffcc\001\002\000\004\074\321\001\002\000" +
    "\004\053\322\001\002\000\004\040\323\001\002\000\010" +
    "\017\uffce\041\uffce\074\uffce\001\002\000\004\040\325\001" +
    "\002\000\012\004\267\013\264\024\266\041\326\001\002" +
    "\000\016\004\uffc9\013\uffc9\024\uffc9\041\uffc9\055\303\074" +
    "\uffc9\001\002\000\014\004\267\013\264\024\266\041\263" +
    "\074\334\001\002\000\004\074\331\001\002\000\004\055" +
    "\332\001\002\000\004\040\333\001\002\000\014\004\uffca" +
    "\013\uffca\024\uffca\041\uffca\074\uffca\001\002\000\004\054" +
    "\342\001\002\000\004\074\336\001\002\000\004\055\337" +
    "\001\002\000\004\040\340\001\002\000\004\041\341\001" +
    "\002\000\014\004\uffcb\013\uffcb\024\uffcb\041\uffcb\074\uffcb" +
    "\001\002\000\004\040\343\001\002\000\004\041\344\001" +
    "\002\000\004\074\uffcd\001\002\000\004\040\346\001\002" +
    "\000\012\004\267\013\264\024\266\041\263\001\002\000" +
    "\004\074\350\001\002\000\004\056\351\001\002\000\004" +
    "\040\352\001\002\000\010\017\uffc7\041\uffc7\074\uffc7\001" +
    "\002\000\004\040\354\001\002\000\010\003\166\041\355" +
    "\074\160\001\002\000\022\042\205\046\177\052\201\053" +
    "\203\056\202\057\204\060\200\074\uffdc\001\002\000\004" +
    "\074\361\001\002\000\006\041\360\074\160\001\002\000" +
    "\022\042\205\046\177\052\201\053\203\056\202\057\204" +
    "\060\200\074\uffdd\001\002\000\004\052\362\001\002\000" +
    "\004\040\363\001\002\000\010\017\uffc8\041\uffc8\074\uffc8" +
    "\001\002\000\004\040\365\001\002\000\012\004\267\013" +
    "\264\024\266\041\263\001\002\000\004\074\367\001\002" +
    "\000\004\060\370\001\002\000\004\040\371\001\002\000" +
    "\010\017\uffc6\041\uffc6\074\uffc6\001\002\000\004\040\373" +
    "\001\002\000\010\017\uffcf\041\uffcf\074\uffcf\001\002\000" +
    "\004\040\375\001\002\000\010\017\uffd0\041\uffd0\074\uffd0" +
    "\001\002\000\004\022\377\001\002\000\004\040\u0100\001" +
    "\002\000\004\017\u0101\001\002\000\004\011\u0102\001\002" +
    "\000\052\002\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\012\uffde\013\uffde\016\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\026\uffde\043\uffde\051\uffde\061\uffde\062" +
    "\uffde\064\uffde\001\002\000\006\012\u0104\032\125\001\002" +
    "\000\064\011\uff9b\012\uff9b\015\uff9b\017\uff9b\025\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\045\uff9b\050\uff9b\066" +
    "\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\075\uff9b" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\030\013\036\014\035\017\012\020\023\022" +
    "\006\023\010\024\014\025\016\026\007\027\021\036\011" +
    "\001\001\000\006\027\123\031\u0102\001\001\000\002\001" +
    "\001\000\026\037\164\041\166\042\154\043\162\044\155" +
    "\045\163\046\160\047\170\050\167\051\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\131\035\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\017\012\020\023\022" +
    "\006\023\040\024\014\025\016\026\007\027\021\036\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\061\001\001\000\004" +
    "\027\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\060\001\001\000\004\027\057\001\001\000\002" +
    "\001\001\000\004\027\056\001\001\000\004\027\055\001" +
    "\001\000\004\027\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\102\016\101" +
    "\017\076\021\100\022\072\026\077\036\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\101\017\076\021\104" +
    "\022\072\026\077\036\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\106\001\001\000\004\056\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\116\017\012\020\023\022\006\023" +
    "\010\024\014\025\016\026\007\027\021\036\011\001\001" +
    "\000\024\017\012\020\023\022\006\023\040\024\014\025" +
    "\016\026\007\027\021\036\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\123\031\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\166\042\154\043\162\044\155\045\163\046\160\047" +
    "\170\050\167\051\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\207\054\371\055\214\001" +
    "\001\000\010\053\207\054\363\055\214\001\001\000\010" +
    "\053\207\054\352\055\214\001\001\000\010\053\207\054" +
    "\344\055\214\001\001\000\010\053\207\054\314\055\214" +
    "\001\001\000\010\053\207\054\305\055\214\001\001\000" +
    "\010\053\207\054\205\055\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\226\001\001\000\002\001\001\000\004\027\230\001\001" +
    "\000\002\001\001\000\004\027\232\001\001\000\002\001" +
    "\001\000\004\027\234\001\001\000\002\001\001\000\004" +
    "\027\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\250\001\001\000\002" +
    "\001\001\000\004\027\252\001\001\000\002\001\001\000" +
    "\004\027\254\001\001\000\002\001\001\000\004\027\256" +
    "\001\001\000\002\001\001\000\004\027\260\001\001\000" +
    "\002\001\001\000\004\030\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\123\031\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\327\033\326\001\001\000\002\001\001\000\004\030\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\037\356\040\355\041" +
    "\166\042\154\043\162\044\155\045\163\046\160\047\170" +
    "\050\167\051\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\041\166\042\154\043\162\044\155\045\163" +
    "\046\160\047\170\050\167\051\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoUFE$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoUFE$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoUFE$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Sentencia> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoUFE$actions {




  private final SintacticoUFE parser;

  /** Constructor */
  CUP$SintacticoUFE$actions(SintacticoUFE parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoUFE$do_action_part00000000(
    int                        CUP$SintacticoUFE$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoUFE$parser,
    java.util.Stack            CUP$SintacticoUFE$stack,
    int                        CUP$SintacticoUFE$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoUFE$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoUFE$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> start_val = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoUFE$parser.done_parsing();
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTASENTS 
            {
              LinkedList<Sentencia> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		LinkedList<Sentencia> ls = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            parser.resultado=ls;
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTASENTS ::= LISTASENTS SENTENCIAS 
            {
              LinkedList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> a = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTASENTS ::= SENTENCIAS 
            {
              LinkedList<Sentencia> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTASENTS ::= error tPuntoComa 
            {
              LinkedList<Sentencia> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASENTS",10, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= COMPONENTE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= DECLARACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT =a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= REASIGNACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Reasignacion a = (Reasignacion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= IMPRIMIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= RENDER 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= RETURN 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= CSS 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CSS ::= E tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new CSS(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("CSS",14, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPRIMIR ::= tImprimir tParA LISTAE tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		 RESULT = new Imprimir(b, aright, aleft); 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAE ::= LISTAE tComa E 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            RESULT = l;
            l.add(a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAE",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAE ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAE",23, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= tVar LISTASIGNACION tPuntoComa 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Declaracion> a = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		 RESULT= new Declaracion(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTASIGNACION ::= LISTASIGNACION tComa ASIGNACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<Declaracion> a = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Declaracion b = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		 
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTASIGNACION ::= ASIGNACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Declaracion b = (Declaracion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		 
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTASIGNACION ::= error tPuntoComa 
            {
              LinkedList<Declaracion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= tId tIgual E 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion asignacion = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Declaracion(a,asignacion);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= tId 
            {
              Declaracion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Declaracion(nombre,null);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RENDER ::= tRender tParA tMenorQ tDiv tId tMayorQ tComa tId tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		 RESULT = new Render(nombre,val); 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RENDER",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RENDER ::= error 
            {
              Sentencia RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RENDER",19, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // REASIGNACION ::= tId tIgual E tPuntoComa 
            {
              Reasignacion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Reasignacion(nombre,valor);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("REASIGNACION",28, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMPONENTE ::= tComponent tId tParA tParC tLlaveA LSENTCOMPONENTE tLlaveC 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> lista = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Componente(lista,id);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTE",18, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LSENTCOMPONENTE ::= LSENTCOMPONENTE SENTCOMPONENTE 
            {
              LinkedList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> a = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LSENTCOMPONENTE",11, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LSENTCOMPONENTE ::= SENTCOMPONENTE 
            {
              LinkedList<Sentencia> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LSENTCOMPONENTE",11, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTCOMPONENTE ::= DECLARACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTCOMPONENTE ::= REASIGNACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Reasignacion a = (Reasignacion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTCOMPONENTE ::= IMPRIMIR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTCOMPONENTE ::= RETURN 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTCOMPONENTE ::= SI 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SENTCOMPONENTE",15, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SI ::= tSi tParA E RELA E tParC tLlaveA LISTASENTS tLlaveC 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		TipoOperador op = (TipoOperador)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Sentencia> ls = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		
        RESULT=new Si(a,b,op,ls);
    
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN ::= tReturn LINSTRUFEX tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).right;
		LinkedList<ComponenteJava> lf = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)).value;
		RESULT=new Return(lf);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETURN ::= tReturn tMenorQ tDiagonal tId tMayorQ tParC tPuntoComa 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		RESULT=new Return(id);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIONOLINSTRUFEX ::= LINSTRUFEX tMenorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<ComponenteJava> a = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SIONOLINSTRUFEX",30, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIONOLINSTRUFEX ::= tMenorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SIONOLINSTRUFEX",30, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINSTRUFEX ::= LINSTRUFEX INSTRUFEX 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<ComponenteJava> a = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ComponenteJava b = (ComponenteJava)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = a;
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINSTRUFEX ::= INSTRUFEX 
            {
              LinkedList<ComponenteJava> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ComponenteJava b = (ComponenteJava)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                RESULT = new LinkedList<>();
                RESULT.add(b);
            
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LINSTRUFEX ::= error tMayorQ 
            {
              LinkedList<ComponenteJava> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LINSTRUFEX",29, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUFEX ::= PANEL 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUFEX ::= BOTON 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUFEX ::= LABEL 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Label a = (Label)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUFEX ::= JTEXTFIELD 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		TextField a = (TextField)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUFEX ::= JSPINNER 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Spinner a = (Spinner)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUFEX ::= JLIST 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		ListCombo a = (ListCombo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUFEX ::= IMAGEN 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUFEX ::= IDCOMPO 
            {
              ComponenteJava RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		IdComponente a = (IdComponente)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("INSTRUFEX",39, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IDCOMPO ::= tDiagonal tId tMayorQ 
            {
              IdComponente RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new IdComponente(a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IDCOMPO",35, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMAGEN ::= tMenorQ tImagen SNLISTAATRIBUTOS tMayorQ 
            {
              Imagen RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		
            RESULT=new Imagen(ls);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("IMAGEN",38, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // JLIST ::= tMenorQ tList SNLISTAATRIBUTOS tMayorQ LISTELEMENT tDiagonal tList tMayorQ 
            {
              ListCombo RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		LinkedList<Expresion> le = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
            RESULT = new ListCombo(ls, le);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JLIST",34, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTELEMENT ::= tMenorQ tElement tMayorQ LISTAITEM tDiagonal tElement tMayorQ tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTELEMENT",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTELEMENT ::= tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTELEMENT",24, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTAITEM ::= LISTAITEM LISTA tDiagonal tItem tMayorQ tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTAITEM ::= LISTA tDiagonal tItem tMayorQ 
            {
              LinkedList<Expresion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTAITEM ::= tMenorQ 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAITEM",25, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PANEL ::= tMenorQ tPanel SNLISTAATRIBUTOS tMayorQ SIONOLINSTRUFEX tDiagonal tPanel tMayorQ 
            {
              Panel RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int lsxleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int lsxright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		LinkedList<ComponenteJava> lsx = (LinkedList<ComponenteJava>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
            RESULT=new Panel(ls,lsx);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("PANEL",31, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // JSPINNER ::= tMenorQ tSpinner SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tSpinner tMayorQ 
            {
              Spinner RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion lt = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Spinner(ls,lt);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JSPINNER",37, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOTON ::= tMenorQ tBoton SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tBoton tMayorQ 
            {
              Boton RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion lt = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Boton(ls,lt);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA ::= tLlaveA tId tCorcheA tEntero tCorcheC tLlaveC tMenorQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		RESULT=new ArrayPosicion(a,exp,Simbolo.EnumTipoDato.ARRAY);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA ::= tEntero tMenorQ 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, exp);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA ::= tMenorQ tItem tMayorQ LISTA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTA ::= tCadena tMenorQ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LABEL ::= tMenorQ tText SNLISTAATRIBUTOS tMayorQ LISTA tDiagonal tText tMayorQ 
            {
              Label RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		Expresion le = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		
        RESULT= new Label(ls,le);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LABEL",33, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // JTEXTFIELD ::= tMenorQ tTextField SNLISTAATRIBUTOS tMayorQ LISTAE tMenorQ tDiagonal tTextField tMayorQ 
            {
              TextField RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)).value;
		
        RESULT= new TextField(ls,a);
        
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("JTEXTFIELD",36, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SNLISTAATRIBUTOS ::= LISTAATRIBUTOS 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SNLISTAATRIBUTOS",42, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SNLISTAATRIBUTOS ::= 
            {
              LinkedList<Atributo> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("SNLISTAATRIBUTOS",42, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTAATRIBUTOS ::= LISTAATRIBUTOS ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTAATRIBUTOS ::= ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAATRIBUTOS ::= error tMayorQ 
            {
              LinkedList<Atributo> RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",43, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATRIBUTO ::= tIdEtq tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("id",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATRIBUTO ::= tX tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("x",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATRIBUTO ::= tY tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("y",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATRIBUTO ::= tHeight tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("height",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATRIBUTO ::= tWidth tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("width",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ATRIBUTO ::= tColor tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("color",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ATRIBUTO ::= tBorder tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("border",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ATRIBUTO ::= tMax tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("max",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ATRIBUTO ::= tMin tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("min",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ATRIBUTO ::= tClassname tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("classname",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ATRIBUTO ::= tSrc tIgual E 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT = new Atributo("src",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATRIBUTO ::= tOnClick tIgual tLlaveA E tLlaveC 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT = new Atributo("onclick",a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",41, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RELA ::= tDobleIgual 
            {
              TipoOperador RESULT =null;
		 RESULT = TipoOperador.IGUAL; 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RELA",44, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RELA ::= tMayorQ 
            {
              TipoOperador RESULT =null;
		 RESULT = TipoOperador.MAYOR; 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RELA",44, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RELA ::= tMenorQ 
            {
              TipoOperador RESULT =null;
		 RESULT = TipoOperador.MENOR; 
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("RELA",44, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E tSuma E 
            {
              Expresion RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E tResta E 
            {
              Expresion RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E tMult E 
            {
              Expresion RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E tDiv E 
            {
              Expresion RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E tPow E 
            {
              Expresion RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= tImport tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= tId tCorcheA E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new ArrayPosicion(a,exp,Simbolo.EnumTipoDato.ARRAY);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Id(a, aright, aleft);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= tCadenas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= tCaracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CARACTER, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= tDoble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.DOBLE, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= tTrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, a);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= tFalse 
            {
              Expresion RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= tParA E tParC 
            {
              Expresion RESULT =null;

              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= tLlaveA LISTAE tLlaveC 
            {
              Expresion RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).right;
		LinkedList<Expresion> ls = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-1)).value;
		RESULT=new Array(Simbolo.EnumTipoDato.ARRAY, ls);
              CUP$SintacticoUFE$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.elementAt(CUP$SintacticoUFE$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoUFE$stack.peek()), RESULT);
            }
          return CUP$SintacticoUFE$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoUFE$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoUFE$do_action(
    int                        CUP$SintacticoUFE$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoUFE$parser,
    java.util.Stack            CUP$SintacticoUFE$stack,
    int                        CUP$SintacticoUFE$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoUFE$do_action_part00000000(
                               CUP$SintacticoUFE$act_num,
                               CUP$SintacticoUFE$parser,
                               CUP$SintacticoUFE$stack,
                               CUP$SintacticoUFE$top);
    }
}

}
