
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Entorno.Simbolo.TipoOperador;
import Expresion.*;
import Sentecia.*;
import Entorno.Simbolo;
import Datos.*;
import IntruccionHTML.*;
import Datos.Atributo.TIPOOPERACION;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCSS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symc.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCSS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\005\003\000\002\010" +
    "\004\000\002\010\003\000\002\012\007\000\002\004\004" +
    "\000\002\004\003\000\002\013\007\000\002\006\004\000" +
    "\002\006\003\000\002\006\003\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\010\000" +
    "\002\011\010\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\004\004\007\001\002\000\006\002\000\004" +
    "\007\001\002\000\004\002\112\001\002\000\006\002\ufffe" +
    "\004\ufffe\001\002\000\004\013\010\001\002\000\020\006" +
    "\020\007\021\015\013\017\014\023\016\024\017\026\011" +
    "\001\002\000\004\011\107\001\002\000\020\006\ufff8\007" +
    "\ufff8\015\ufff8\017\ufff8\023\ufff8\024\ufff8\026\ufff8\001\002" +
    "\000\020\006\ufff7\007\ufff7\015\ufff7\017\ufff7\023\ufff7\024" +
    "\ufff7\026\ufff7\001\002\000\006\005\066\011\065\001\002" +
    "\000\020\006\020\007\021\015\053\017\014\023\016\024" +
    "\017\026\011\001\002\000\004\011\050\001\002\000\006" +
    "\005\035\011\034\001\002\000\004\011\031\001\002\000" +
    "\004\011\022\001\002\000\012\004\027\016\024\020\025" +
    "\021\026\001\002\000\004\014\030\001\002\000\004\014" +
    "\uffe8\001\002\000\004\014\uffea\001\002\000\004\014\uffe7" +
    "\001\002\000\004\014\uffe9\001\002\000\020\006\uffed\007" +
    "\uffed\015\uffed\017\uffed\023\uffed\024\uffed\026\uffed\001\002" +
    "\000\012\004\027\016\024\020\025\021\026\001\002\000" +
    "\004\014\033\001\002\000\020\006\uffef\007\uffef\015\uffef" +
    "\017\uffef\023\uffef\024\uffef\026\uffef\001\002\000\012\004" +
    "\027\016\024\020\025\021\026\001\002\000\006\010\036" +
    "\025\037\001\002\000\004\011\043\001\002\000\004\011" +
    "\040\001\002\000\012\004\027\016\024\020\025\021\026" +
    "\001\002\000\004\014\042\001\002\000\020\006\uffec\007" +
    "\uffec\015\uffec\017\uffec\023\uffec\024\uffec\026\uffec\001\002" +
    "\000\012\004\027\016\024\020\025\021\026\001\002\000" +
    "\004\014\045\001\002\000\020\006\uffeb\007\uffeb\015\uffeb" +
    "\017\uffeb\023\uffeb\024\uffeb\026\uffeb\001\002\000\004\014" +
    "\047\001\002\000\020\006\uffee\007\uffee\015\uffee\017\uffee" +
    "\023\uffee\024\uffee\026\uffee\001\002\000\012\004\027\016" +
    "\024\020\025\021\026\001\002\000\004\014\052\001\002" +
    "\000\020\006\ufff4\007\ufff4\015\ufff4\017\ufff4\023\ufff4\024" +
    "\ufff4\026\ufff4\001\002\000\004\012\055\001\002\000\020" +
    "\006\ufff9\007\ufff9\015\ufff9\017\ufff9\023\ufff9\024\ufff9\026" +
    "\ufff9\001\002\000\004\004\061\001\002\000\010\002\ufffb" +
    "\004\ufffb\012\ufffb\001\002\000\010\002\ufffd\004\ufffd\012" +
    "\055\001\002\000\010\002\ufffc\004\ufffc\012\ufffc\001\002" +
    "\000\004\013\062\001\002\000\020\006\020\007\021\015" +
    "\013\017\014\023\016\024\017\026\011\001\002\000\020" +
    "\006\020\007\021\015\064\017\014\023\016\024\017\026" +
    "\011\001\002\000\010\002\ufffa\004\ufffa\012\ufffa\001\002" +
    "\000\012\004\027\016\024\020\025\021\026\001\002\000" +
    "\020\004\027\016\024\020\025\021\026\023\071\025\070" +
    "\026\067\001\002\000\004\011\102\001\002\000\004\011" +
    "\077\001\002\000\004\011\074\001\002\000\004\014\073" +
    "\001\002\000\020\006\ufff6\007\ufff6\015\ufff6\017\ufff6\023" +
    "\ufff6\024\ufff6\026\ufff6\001\002\000\012\004\027\016\024" +
    "\020\025\021\026\001\002\000\004\014\076\001\002\000" +
    "\020\006\ufff1\007\ufff1\015\ufff1\017\ufff1\023\ufff1\024\ufff1" +
    "\026\ufff1\001\002\000\012\004\027\016\024\020\025\021" +
    "\026\001\002\000\004\014\101\001\002\000\020\006\ufff2" +
    "\007\ufff2\015\ufff2\017\ufff2\023\ufff2\024\ufff2\026\ufff2\001" +
    "\002\000\012\004\027\016\024\020\025\021\026\001\002" +
    "\000\004\014\104\001\002\000\020\006\ufff0\007\ufff0\015" +
    "\ufff0\017\ufff0\023\ufff0\024\ufff0\026\ufff0\001\002\000\004" +
    "\014\106\001\002\000\020\006\ufff3\007\ufff3\015\ufff3\017" +
    "\ufff3\023\ufff3\024\ufff3\026\ufff3\001\002\000\012\004\027" +
    "\016\024\020\025\021\026\001\002\000\004\014\111\001" +
    "\002\000\020\006\ufff5\007\ufff5\015\ufff5\017\ufff5\023\ufff5" +
    "\024\ufff5\026\ufff5\001\002\000\004\002\001\001\002\000" +
    "\006\002\uffff\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\010\005\004\010\003\012\005\001\001\000" +
    "\004\012\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\014\011\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\056\013\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\062\011\011\001\001\000\004\011\053" +
    "\001\001\000\002\001\001\000\004\002\104\001\001\000" +
    "\004\002\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Atributo> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCSS$actions {




  private final SintacticoCSS parser;

  /** Constructor */
  CUP$SintacticoCSS$actions(SintacticoCSS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCSS$do_action_part00000000(
    int                        CUP$SintacticoCSS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCSS$parser,
    java.util.Stack            CUP$SintacticoCSS$stack,
    int                        CUP$SintacticoCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCSS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LISTA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		LinkedList<Atributo> start_val = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCSS$parser.done_parsing();
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LISTA ::= LISTAATRIBUTOS 
            {
              LinkedList<Atributo> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		LinkedList<Atributo> ls = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            parser.resultado=ls;
        
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAATRIBUTOS ::= LISTAATRIBUTOS ATRIB 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAATRIBUTOS ::= ATRIB 
            {
              LinkedList<Atributo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("LISTAATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ATRIB ::= tId tLlaveA LISTAAT tLlaveC SUBLISTAS 
            {
              Atributo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		LinkedList<Atributo> b = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		RESULT=new Atributo(id,a,b);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SUBLISTAS ::= SUBLISTAS LISTASUB 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            RESULT=a;
            RESULT.add(b);
        
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("SUBLISTAS",2, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SUBLISTAS ::= LISTASUB 
            {
              LinkedList<Atributo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(b);
        
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("SUBLISTAS",2, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTASUB ::= tPunto tId tLlaveA LISTAAT tLlaveC 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		LinkedList<Atributo> b = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
            RESULT=new Atributo(a,b);
        
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("LISTASUB",9, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAAT ::= LISTAAT ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            RESULT=a;
            RESULT.add(b);
        
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("LISTAAT",4, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAAT ::= ATRIBUTO 
            {
              LinkedList<Atributo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Atributo b = (Atributo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(b);
        
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("LISTAAT",4, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTAAT ::= tLlaveC 
            {
              LinkedList<Atributo> RESULT =null;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("LISTAAT",4, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATRIBUTO ::= tBorder tGuion E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("border",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ATRIBUTO ::= tHight tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("height",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ATRIBUTO ::= tWidth tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("width",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ATRIBUTO ::= tBorder tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("BorderTrue",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ATRIBUTO ::= tBorder tGuion tColor tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("BorderColor",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ATRIBUTO ::= tBorder tGuion tWidth tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("BorderWidth",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATRIBUTO ::= tBorder tGuion tHight tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("BorderHight",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUTO ::= tBackground tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("Background",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTO ::= tFont tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("Font",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATRIBUTO ::= tAlign tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("Align",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUTO ::= tFont tGuion tColor tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("FontColor",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATRIBUTO ::= tFont tGuion tSize tDosPuntos E tPuntoComa 
            {
              Atributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = new Atributo("FontSize",a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		RESULT=new Id(a, aright, aleft);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= tCaracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		RESULT=new Literal(Simbolo.EnumTipoDato.CARACTER, a);
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCSS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCSS$do_action(
    int                        CUP$SintacticoCSS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCSS$parser,
    java.util.Stack            CUP$SintacticoCSS$stack,
    int                        CUP$SintacticoCSS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCSS$do_action_part00000000(
                               CUP$SintacticoCSS$act_num,
                               CUP$SintacticoCSS$parser,
                               CUP$SintacticoCSS$stack,
                               CUP$SintacticoCSS$top);
    }
}

}
