/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/AnalizadoresTexto/LexicoUFE.jflex</tt>
 */
public class LexicoUFE implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTMULTI = 2;
  public static final int COMENTSIMPLE = 4;
  public static final int STRING = 6;
  public static final int UFEX = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8, 12,  6,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 34,  9,  0,  0,  0, 35,  5, 43, 44, 10, 45, 38, 46,  2, 11, 
     1,  1, 27,  1,  1,  1,  1,  1,  1,  1,  0, 31, 33, 30, 32,  0, 
     0, 21, 52, 13, 26, 18, 49, 51, 54, 24,  3, 56, 25, 15, 17, 14, 
    16,  3, 22, 29, 19, 48, 20, 47, 50, 53,  3, 41,  0, 42, 36,  4, 
     0, 21, 52, 13, 26, 18, 49, 51, 54, 24,  3, 56, 25, 15, 17, 14, 
    16,  3, 22, 29, 19, 48, 20, 47, 50, 53,  3, 40, 37, 39,  0,  0, 
     0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\6\3\1\1\1\3\1\1\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\3"+
    "\2\31\1\32\1\33\1\34\1\35\1\36\6\3\1\1"+
    "\2\3\1\1\1\3\1\10\1\37\1\13\1\25\1\3"+
    "\1\40\1\3\1\41\1\3\2\0\1\42\1\43\1\44"+
    "\2\3\1\0\5\3\1\0\1\3\2\45\1\46\1\3"+
    "\1\47\1\50\4\3\1\0\4\3\2\0\1\51\2\3"+
    "\1\51\1\0\1\3\2\0\2\3\3\0\4\3\1\52"+
    "\1\53\2\3\1\0\1\3\1\54\1\3\1\55\1\56"+
    "\3\3\1\0\1\3\1\0\5\3\1\57\2\60\3\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\61\1\3\1\61"+
    "\1\62\1\63\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\64\3\3\2\0\2\3\2\65\1\0"+
    "\2\3\1\0\4\3\1\66\1\0\1\67\1\3\1\67"+
    "\2\70\1\0\1\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\1\0\4\3\2\0\2\3\2\71\1\72\1\0"+
    "\1\3\1\0\1\3\1\73\2\3\2\74\1\0\1\3"+
    "\2\75\2\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\76\1\77\1\100\1\0\1\100\1\3"+
    "\1\0\1\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\101\1\102\2\103\1\3\1\0\1\3\1\0\1\3"+
    "\2\104\1\105\2\0\1\3\1\0\1\3\2\106\1\3"+
    "\1\0\1\3\2\107\1\3\1\0\1\3\2\110\1\77"+
    "\2\111\1\0\1\3\2\112\1\0\1\3\1\113\2\114"+
    "\2\115\2\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u011d\0\u011d\0\u011d\0\u0201\0\u023a\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u04ad\0\u011d\0\u04e6\0\u011d\0\u011d\0\u011d\0\u011d\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u011d\0\u011d\0\u07cb\0\u0804\0\u083d"+
    "\0\u018f\0\u0876\0\u018f\0\u08af\0\u08e8\0\u0921\0\u011d\0\u011d"+
    "\0\u011d\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u011d\0\u0c06\0\u011d"+
    "\0\u011d\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u011d\0\u0eb2\0\u0eeb\0\u018f"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u08e8\0\u011d\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u018f\0\u12ed\0\u018f\0\u018f\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u018f\0\u011d\0\u018f\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u011d"+
    "\0\u17d3\0\u018f\0\u011d\0\u011d\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u018f"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u011d"+
    "\0\u018f\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u011d\0\u1e48\0\u018f\0\u011d\0\u018f"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\u22bc\0\u011d\0\u018f\0\u018f\0\u22f5"+
    "\0\u232e\0\u2367\0\u23a0\0\u018f\0\u23d9\0\u2412\0\u011d\0\u018f"+
    "\0\u244b\0\u2484\0\u011d\0\u018f\0\u24bd\0\u24f6\0\u252f\0\u2568"+
    "\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730"+
    "\0\u2769\0\u011d\0\u27a2\0\u018f\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u018f\0\u018f"+
    "\0\u011d\0\u018f\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u011d"+
    "\0\u018f\0\u018f\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u011d"+
    "\0\u018f\0\u2c4f\0\u2c88\0\u2cc1\0\u011d\0\u018f\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u011d\0\u018f\0\u011d\0\u011d\0\u018f\0\u2da5\0\u2dde"+
    "\0\u011d\0\u018f\0\u2e17\0\u2e50\0\u018f\0\u011d\0\u018f\0\u011d"+
    "\0\u018f\0\u011d\0\u018f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\6\1\11\3\12\1\13"+
    "\1\14\1\15\1\0\1\16\1\10\1\17\1\20\2\10"+
    "\1\21\1\22\1\10\1\23\1\24\1\25\2\10\1\7"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\2\10\1\51\5\10\1\6\1\10"+
    "\12\52\1\53\1\52\1\0\64\52\1\54\60\52\11\55"+
    "\1\56\57\55\1\6\1\7\1\6\1\10\2\6\3\12"+
    "\1\57\1\6\1\60\1\0\1\61\1\62\1\63\1\64"+
    "\1\10\1\65\1\66\3\10\1\67\1\70\1\71\1\10"+
    "\1\7\1\72\1\73\1\74\1\75\1\32\1\76\5\6"+
    "\1\41\1\42\1\43\1\44\1\77\1\46\2\6\1\100"+
    "\2\10\1\101\1\10\1\102\1\103\1\104\1\6\1\10"+
    "\72\0\1\7\1\105\30\0\1\7\36\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\5\106\1\0\63\106\12\0\1\107"+
    "\1\110\24\0\1\111\31\0\1\10\1\0\2\10\10\0"+
    "\1\10\1\112\10\10\1\0\1\10\1\113\2\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\114\1\115\3\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\1\10\1\116\10\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\11\10\1\117\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\10\10\1\120\1\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\5\10\1\121\4\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\17\0\1\122\52\0\1\10\1\0"+
    "\2\10\10\0\2\10\1\123\7\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\27\0\2\124\41\0"+
    "\1\10\1\0\2\10\10\0\12\10\1\124\1\125\3\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\36\0\1\126"+
    "\33\0\1\10\1\0\2\10\10\0\10\10\1\127\1\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\13\0\1\54\67\0\1\130\1\131\56\0\1\10\1\0"+
    "\2\10\10\0\1\10\1\132\10\10\1\0\1\10\1\133"+
    "\2\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\4\10\1\134\5\10\1\0"+
    "\4\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\10\10\1\135\1\10\1\136"+
    "\1\137\3\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\10\10\1\140\1\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\12\10\1\0\1\10"+
    "\1\141\2\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\5\10\1\142\4\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\17\0\1\143\3\0\1\144\6\0\1\145\37\0\1\10"+
    "\1\0\2\10\10\0\2\10\1\146\3\10\1\147\3\10"+
    "\1\0\2\10\1\150\1\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\151\1\152\3\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\20\0\1\153\5\0\1\154\43\0\1\10\1\0"+
    "\2\10\10\0\3\10\1\155\5\10\1\156\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\7\0\1\157"+
    "\122\0\1\160\30\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\161\1\162\3\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\10\0\1\10\1\163"+
    "\10\10\1\0\4\10\1\0\1\10\21\0\1\10\1\164"+
    "\6\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\5\10\1\165\4\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\166\31\0\1\166\42\0"+
    "\1\167\64\0\1\10\1\0\2\10\10\0\2\10\1\170"+
    "\7\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\10\0\10\10\1\171"+
    "\1\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\22\0\1\172\47\0\1\10\1\0\2\10\10\0"+
    "\5\10\1\173\4\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\12\10\1\0\4\10\1\0\1\10\21\0\1\174\7\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\0\4\10\1\0\1\10\21\0\1\10\1\175\6\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\11\10"+
    "\1\176\1\0\1\10\1\177\2\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\3\10\1\200\1\201\1\10\1\202\3\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\20\0\1\203"+
    "\51\0\1\10\1\0\2\10\10\0\3\10\1\204\6\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\21\0\1\205\50\0\1\10\1\0\2\10\10\0\4\10"+
    "\1\206\5\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\0\1\10\1\207\2\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\0\1\10\1\210\2\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\10\10"+
    "\1\211\1\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\1\212"+
    "\11\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\10\0\12\10\1\0"+
    "\4\10\1\0\1\10\21\0\3\10\1\213\4\10\1\0"+
    "\1\10\21\0\1\214\50\0\1\10\1\0\2\10\10\0"+
    "\4\10\1\215\5\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\4\10\1\216\5\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\5\10\1\217\4\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\10\0"+
    "\12\10\1\0\4\10\1\0\1\10\21\0\3\10\1\220"+
    "\4\10\1\0\1\10\25\0\1\221\65\0\1\222\47\0"+
    "\1\10\1\0\2\10\10\0\10\10\1\223\1\10\1\0"+
    "\4\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\5\10\1\224\4\10\1\0"+
    "\4\10\1\0\1\10\21\0\10\10\1\0\1\10\34\0"+
    "\2\225\34\0\1\10\1\0\2\10\10\0\12\10\1\0"+
    "\4\10\1\225\1\226\21\0\10\10\1\0\1\10\27\0"+
    "\2\227\55\0\1\230\54\0\1\10\1\0\2\10\10\0"+
    "\12\10\1\227\1\231\3\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\1\232"+
    "\11\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\13\0\1\233\70\0\1\234\107\0\1\235\37\0"+
    "\1\10\1\0\2\10\10\0\12\10\1\0\2\10\1\236"+
    "\1\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\11\10\1\237\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\10\0\6\10\1\240\3\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\10\0\12\10\1\241\1\242\3\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\3\10\1\243\6\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\0\4\10\1\244\1\245\21\0"+
    "\10\10\1\0\1\10\21\0\1\246\50\0\1\10\1\0"+
    "\2\10\10\0\4\10\1\247\5\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\5\10\1\250\4\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\5\10\1\251\4\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\0\2\10\1\252\1\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\0\4\10\1\0\1\10\21\0"+
    "\1\10\1\253\6\10\1\0\1\10\16\0\1\254\7\0"+
    "\1\255\43\0\1\10\1\0\2\10\10\0\1\10\1\256"+
    "\7\10\1\257\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\16\0\1\260\53\0\1\10\1\0\2\10"+
    "\10\0\1\10\1\261\10\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\12\10\1\0\4\10\1\262\1\263\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\1\10"+
    "\1\264\10\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\0\4\10\1\265\1\266\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\12\10\1\0\1\10"+
    "\1\267\2\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\5\10\1\270\4\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\2\10\1\271\7\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\6\10\1\272\3\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\63\0\1\273\24\0\1\274\52\0\1\10\1\0\2\10"+
    "\10\0\12\10\1\0\4\10\1\0\1\10\21\0\4\10"+
    "\1\275\3\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\2\10\1\276\7\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\23\0\1\277\46\0\1\10"+
    "\1\0\2\10\10\0\6\10\1\300\3\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\21\0\1\301"+
    "\50\0\1\10\1\0\2\10\10\0\4\10\1\302\5\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\23\0\1\303\46\0\1\10\1\0\2\10\10\0\6\10"+
    "\1\304\3\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\0\2\10\1\305\1\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\6\10"+
    "\1\306\3\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\63\0\1\307\6\0\1\10\1\0\2\10"+
    "\10\0\12\10\1\0\4\10\1\0\1\10\21\0\4\10"+
    "\1\310\3\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\1\10\1\311\10\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\34\0\2\312\34\0\1\10"+
    "\1\0\2\10\10\0\12\10\1\0\4\10\1\312\1\313"+
    "\21\0\10\10\1\0\1\10\23\0\1\314\46\0\1\10"+
    "\1\0\2\10\10\0\6\10\1\315\3\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\10\0\6\10\1\316\3\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\10\0\5\10\1\317\4\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\10\0\11\10\1\320\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\26\0\1\321\71\0"+
    "\2\322\41\0\1\10\1\0\2\10\10\0\11\10\1\323"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\12\10\1\322\1\324"+
    "\3\10\1\0\1\10\21\0\10\10\1\0\1\10\22\0"+
    "\1\325\47\0\1\10\1\0\2\10\10\0\5\10\1\326"+
    "\4\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\10\0\11\10\1\327"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\34\0\2\330\34\0\1\10\1\0\2\10\10\0\12\10"+
    "\1\0\4\10\1\330\1\331\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\12\10\1\332\1\333"+
    "\3\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\12\10\1\0\1\10\1\334"+
    "\2\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\5\10\1\335\4\10\1\0"+
    "\4\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\12\10\1\0\4\10\1\0"+
    "\1\10\21\0\2\10\1\336\5\10\1\0\1\10\22\0"+
    "\1\337\47\0\1\10\1\0\2\10\10\0\5\10\1\340"+
    "\4\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\21\0\1\341\50\0\1\10\1\0\2\10\10\0"+
    "\4\10\1\342\5\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\66\0\1\343\3\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\0\4\10\1\0\1\10\21\0"+
    "\7\10\1\344\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\5\10\1\345\4\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\1\10\1\346\10\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\66\0\1\347\3\0\1\10"+
    "\1\0\2\10\10\0\12\10\1\0\4\10\1\0\1\10"+
    "\21\0\7\10\1\350\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\4\10\1\351\5\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\21\0\1\352\50\0"+
    "\1\10\1\0\2\10\10\0\4\10\1\353\5\10\1\0"+
    "\4\10\1\0\1\10\21\0\10\10\1\0\1\10\26\0"+
    "\1\354\43\0\1\10\1\0\2\10\10\0\11\10\1\355"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\12\10\1\356\1\357"+
    "\3\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\11\10\1\360\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\10\0\4\10\1\361\5\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\23\0\1\362"+
    "\64\0\1\363\52\0\1\10\1\0\2\10\10\0\6\10"+
    "\1\364\3\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\10\0\2\10"+
    "\1\365\7\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\21\0\1\366\50\0\1\10\1\0\2\10"+
    "\10\0\4\10\1\367\5\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\15\0\1\370\54\0\1\10"+
    "\1\0\2\10\10\0\1\371\11\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\4\10\1\372\5\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\373\1\374\3\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\22\0\1\375\47\0\1\10"+
    "\1\0\2\10\10\0\5\10\1\376\4\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\10\0\11\10\1\377\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\10\0\4\10\1\u0100\5\10\1\0\4\10\1\0"+
    "\1\10\21\0\10\10\1\0\1\10\23\0\1\u0101\46\0"+
    "\1\10\1\0\2\10\10\0\6\10\1\u0102\3\10\1\0"+
    "\4\10\1\0\1\10\21\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\10\0\5\10\1\u0103\4\10\1\0"+
    "\4\10\1\0\1\10\21\0\10\10\1\0\1\10\25\0"+
    "\1\u0104\44\0\1\10\1\0\2\10\10\0\10\10\1\u0105"+
    "\1\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\25\0\1\u0106\44\0\1\10\1\0\2\10\10\0"+
    "\10\10\1\u0107\1\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\26\0\1\u0108\43\0\1\10\1\0"+
    "\2\10\10\0\11\10\1\u0109\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\10\0\12\10\1\0\3\10\1\u010a\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\2\10\1\0"+
    "\3\u010b\4\0\12\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\27\0\2\u010c\41\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\u010c\1\u010d\3\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\25\0\1\u010e\44\0\1\10"+
    "\1\0\2\10\10\0\10\10\1\u010f\1\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\67\0\2\u0110"+
    "\1\0\1\10\1\0\2\10\10\0\12\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\u0110\1\u0111\1\0\1\10"+
    "\1\0\2\10\10\0\6\10\1\u0112\3\10\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\22\0\1\u0113"+
    "\47\0\1\10\1\0\2\10\10\0\5\10\1\u0114\4\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\26\0\1\u0115\43\0\1\10\1\0\2\10\10\0\11\10"+
    "\1\u0116\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\10\0\4\10\1\u0117"+
    "\5\10\1\0\4\10\1\0\1\10\21\0\10\10\1\0"+
    "\1\10\17\0\1\u0118\52\0\1\10\1\0\2\10\10\0"+
    "\2\10\1\u0119\7\10\1\0\4\10\1\0\1\10\21\0"+
    "\10\10\1\0\1\10\34\0\2\u011a\34\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\0\4\10\1\u011a\1\u011b\21\0"+
    "\10\10\1\0\1\10\53\0\1\u011c\43\0\1\u011d\43\0"+
    "\1\10\1\0\2\10\10\0\11\10\1\u011e\1\0\4\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10\17\0\1\u011f"+
    "\52\0\1\10\1\0\2\10\10\0\2\10\1\u0120\7\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\12\10\1\0\4\10"+
    "\1\u0121\1\u0122\21\0\10\10\1\0\1\10\31\0\1\u0123"+
    "\40\0\1\10\1\0\2\10\10\0\12\10\1\0\1\10"+
    "\1\u0124\2\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\10\0\6\10\1\u0125\3\10"+
    "\1\0\4\10\1\0\1\10\21\0\10\10\1\0\1\10"+
    "\22\0\1\u0126\47\0\1\10\1\0\2\10\10\0\5\10"+
    "\1\u0127\4\10\1\0\4\10\1\0\1\10\21\0\10\10"+
    "\1\0\1\10\22\0\1\u0128\47\0\1\10\1\0\2\10"+
    "\10\0\5\10\1\u0129\4\10\1\0\4\10\1\0\1\10"+
    "\21\0\10\10\1\0\1\10\32\0\1\u012a\37\0\1\10"+
    "\1\0\2\10\10\0\12\10\1\0\2\10\1\u012b\1\10"+
    "\1\0\1\10\21\0\10\10\1\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11913];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\3\11\14\1\20\11\1\1\1\11"+
    "\1\1\4\11\14\1\2\11\7\1\2\0\3\11\2\1"+
    "\1\0\5\1\1\0\3\1\1\11\1\1\2\11\4\1"+
    "\1\0\4\1\2\0\1\11\3\1\1\0\1\1\2\0"+
    "\2\1\3\0\5\1\1\11\2\1\1\0\10\1\1\0"+
    "\1\1\1\0\6\1\1\11\4\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\11\2\1\2\11\1\0\3\1\1\0"+
    "\2\1\1\0\1\1\1\0\5\1\2\0\2\1\1\11"+
    "\1\1\1\0\2\1\1\0\5\1\1\0\1\11\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\2\0\2\1\1\11\2\1"+
    "\1\0\1\1\1\0\4\1\1\11\1\1\1\0\1\1"+
    "\1\11\3\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\2\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\1\1\11\1\1\2\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String cadena="";
    int llamadaString = 0;
    int ESTADOACTUAL = 0;

    public Symbol addSymbol(Symbol s){
        System.out.println(s.value.toString());
        return s;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoUFE(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symu.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
            } 
            // fall through
          case 79: break;
          case 2: 
            { return addSymbol(new Symbol(Symu.tEntero,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 80: break;
          case 3: 
            { return addSymbol(new Symbol(Symu.tId,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 81: break;
          case 4: 
            { /* ignorar */
            } 
            // fall through
          case 82: break;
          case 5: 
            { ESTADOACTUAL = YYINITIAL; yybegin(STRING);
            } 
            // fall through
          case 83: break;
          case 6: 
            { return addSymbol(new Symbol(Symu.tMult,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 84: break;
          case 7: 
            { return addSymbol(new Symbol(Symu.tDiv,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 85: break;
          case 8: 
            { return addSymbol(new Symbol(Symu.tIgual,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 86: break;
          case 9: 
            { return addSymbol(new Symbol(Symu.tPuntoComa,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 87: break;
          case 10: 
            { return addSymbol(new Symbol(Symu.tMayorQ,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 88: break;
          case 11: 
            { return addSymbol(new Symbol(Symu.tMenorQ,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 89: break;
          case 12: 
            { return addSymbol(new Symbol(Symu.tDifQ,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 90: break;
          case 13: 
            { return addSymbol(new Symbol(Symu.tAnd,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 91: break;
          case 14: 
            { return addSymbol(new Symbol(Symu.tXor,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 92: break;
          case 15: 
            { return addSymbol(new Symbol(Symu.tOr,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 93: break;
          case 16: 
            { return addSymbol(new Symbol(Symu.tComa,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 94: break;
          case 17: 
            { return addSymbol(new Symbol(Symu.tLlaveC,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 95: break;
          case 18: 
            { return addSymbol(new Symbol(Symu.tLlaveA,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 96: break;
          case 19: 
            { return addSymbol(new Symbol(Symu.tCorcheA,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 97: break;
          case 20: 
            { return addSymbol(new Symbol(Symu.tCorcheC,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 98: break;
          case 21: 
            { return addSymbol(new Symbol(Symu.tParA,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 99: break;
          case 22: 
            { return addSymbol(new Symbol(Symu.tParC,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 100: break;
          case 23: 
            { return addSymbol(new Symbol(Symu.tSuma,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 101: break;
          case 24: 
            { return addSymbol(new Symbol(Symu.tResta,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 102: break;
          case 25: 
            { 
            } 
            // fall through
          case 103: break;
          case 26: 
            { yybegin(ESTADOACTUAL);
            } 
            // fall through
          case 104: break;
          case 27: 
            { cadena += yytext();
            } 
            // fall through
          case 105: break;
          case 28: 
            { yybegin(ESTADOACTUAL);
            String temporal = cadena; 
            cadena = "";
            return addSymbol( new Symbol(Symu.tCadena, yychar,yyline,temporal) );
            } 
            // fall through
          case 106: break;
          case 29: 
            { ESTADOACTUAL = UFEX; yybegin(STRING);
            } 
            // fall through
          case 107: break;
          case 30: 
            { return addSymbol(new Symbol(Symu.tDiagonal,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 108: break;
          case 31: 
            { yybegin(YYINITIAL);return addSymbol(new Symbol(Symu.tPuntoComa,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 109: break;
          case 32: 
            { return addSymbol(new Symbol(Symu.tX,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 110: break;
          case 33: 
            { return addSymbol(new Symbol(Symu.tY,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 111: break;
          case 34: 
            { ESTADOACTUAL = YYINITIAL; yybegin(COMENTMULTI);
            } 
            // fall through
          case 112: break;
          case 35: 
            { ESTADOACTUAL = YYINITIAL; yybegin(COMENTSIMPLE);
            } 
            // fall through
          case 113: break;
          case 36: 
            { return addSymbol(new Symbol(Symu.tDivMayorQ,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 114: break;
          case 37: 
            { return addSymbol(new Symbol(Symu.tSi,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 115: break;
          case 38: 
            { return addSymbol(new Symbol(Symu.tDobleIgual,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 116: break;
          case 39: 
            { ESTADOACTUAL = UFEX; yybegin(COMENTMULTI);
            } 
            // fall through
          case 117: break;
          case 40: 
            { ESTADOACTUAL = UFEX; yybegin(COMENTSIMPLE);
            } 
            // fall through
          case 118: break;
          case 41: 
            { return addSymbol(new Symbol(Symu.tIdEtq,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 119: break;
          case 42: 
            { return addSymbol(new Symbol(Symu.tDoble,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 120: break;
          case 43: 
            { return addSymbol(new Symbol(Symu.tCaracter,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 121: break;
          case 44: 
            { return addSymbol(new Symbol(Symu.tPow,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 122: break;
          case 45: 
            { return addSymbol(new Symbol(Symu.tVar,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 123: break;
          case 46: 
            { return addSymbol(new Symbol(Symu.tVal,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 124: break;
          case 47: 
            { return addSymbol(new Symbol(Symu.tMax,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 125: break;
          case 48: 
            { return addSymbol(new Symbol(Symu.tMin,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 126: break;
          case 49: 
            { return addSymbol(new Symbol(Symu.tSrc,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 127: break;
          case 50: 
            { return addSymbol(new Symbol(Symu.tMenorDiv,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 128: break;
          case 51: 
            { return addSymbol(new Symbol(Symu.tReturnMenorQ,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 129: break;
          case 52: 
            { return addSymbol(new Symbol(Symu.tTrue,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 130: break;
          case 53: 
            { return addSymbol(new Symbol(Symu.tSiNo,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 131: break;
          case 54: 
            { return addSymbol(new Symbol(Symu.tText,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 132: break;
          case 55: 
            { return addSymbol(new Symbol(Symu.tItem,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 133: break;
          case 56: 
            { return addSymbol(new Symbol(Symu.tList,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 134: break;
          case 57: 
            { return addSymbol(new Symbol(Symu.tFalse,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 135: break;
          case 58: 
            { return addSymbol(new Symbol(Symu.tColor,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 136: break;
          case 59: 
            { return addSymbol(new Symbol(Symu.tPanel,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 137: break;
          case 60: 
            { return addSymbol(new Symbol(Symu.tImagen,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 138: break;
          case 61: 
            { return addSymbol(new Symbol(Symu.tWidth,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 139: break;
          case 62: 
            { return addSymbol(new Symbol(Symu.tRender,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 140: break;
          case 63: 
            { yybegin(UFEX); return addSymbol(new Symbol(Symu.tReturn,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 141: break;
          case 64: 
            { return addSymbol(new Symbol(Symu.tImport,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 142: break;
          case 65: 
            { return addSymbol(new Symbol(Symu.tBorder,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 143: break;
          case 66: 
            { return addSymbol(new Symbol(Symu.tBoton,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 144: break;
          case 67: 
            { return addSymbol(new Symbol(Symu.tHeight,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 145: break;
          case 68: 
            { return addSymbol(new Symbol(Symu.tRepetir,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 146: break;
          case 69: 
            { return addSymbol(new Symbol(Symu.tRender2,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 147: break;
          case 70: 
            { return addSymbol(new Symbol(Symu.tOnClick,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 148: break;
          case 71: 
            { return addSymbol(new Symbol(Symu.tSpinner,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 149: break;
          case 72: 
            { return addSymbol(new Symbol(Symu.tMientras,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 150: break;
          case 73: 
            { return addSymbol(new Symbol(Symu.tImprimir,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 151: break;
          case 74: 
            { return addSymbol(new Symbol(Symu.tElement,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 152: break;
          case 75: 
            { return addSymbol(new Symbol(Symu.tComponent,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 153: break;
          case 76: 
            { return addSymbol(new Symbol(Symu.tClass,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 154: break;
          case 77: 
            { return addSymbol(new Symbol(Symu.tClassname,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 155: break;
          case 78: 
            { return addSymbol(new Symbol(Symu.tTextField,yycolumn,yyline,yytext()));
            } 
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
