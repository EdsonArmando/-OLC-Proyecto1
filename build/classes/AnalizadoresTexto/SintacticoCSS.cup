package Analizadores;

import java.util.*; 
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Entorno.Simbolo.TipoOperador;
import Expresion.*;
import Sentecia.*;
import Entorno.Simbolo;
import Datos.*;
import IntruccionHTML.*;
import Datos.Atributo.TIPOOPERACION;

parser code
{:  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Atributo> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}

action code
{:

:}  

terminal String tId,tGuion,tBackground,tAlign,tSize,tDosPuntos,tPunto,tLlaveA,tPuntoComa,tLlaveC,tCadena,tBorder;
terminal String tEntero,tRgb,tParA,tParC,tComa,tCaracter,tIgual,tWidth,tFont,tColor,tHight;
   
non terminal Expresion E;
non terminal String COLOR;
non terminal  LinkedList<Atributo> SUBLISTAS,LISTA,LISTAAT,SNLISTAATRIBUTOS,LISTAATRIBUTOS;
non terminal Atributo ATRIBUTO,ATRIB,LISTASUB;


start with LISTA;


LISTA ::= LISTAATRIBUTOS:ls{:
            parser.resultado=ls;
        :}
        ;

LISTAATRIBUTOS ::=  LISTAATRIBUTOS:a ATRIB:b  {:
                    RESULT=a;
                    RESULT.add(b);
                :}
                | ATRIB:b  {:
                    RESULT = new LinkedList<>();
                    RESULT.add(b);
                :}
                ;

ATRIB ::= tId:id tLlaveA LISTAAT:a tLlaveC SUBLISTAS:b {:RESULT=new Atributo(id,a,b);:}
        ;

SUBLISTAS ::=  SUBLISTAS:a LISTASUB:b  {:
            RESULT=a;
            RESULT.add(b);
        :}
        | LISTASUB:b  {:
            RESULT = new LinkedList<>();
            RESULT.add(b);
        :}
        ;

LISTASUB ::= tPunto tId:a tLlaveA LISTAAT:b tLlaveC{:
            RESULT=new Atributo(a,b);
        :}
        ;
LISTAAT ::=  LISTAAT:a ATRIBUTO:b  {:
            RESULT=a;
            RESULT.add(b);
        :}
        | ATRIBUTO:b  {:
            RESULT = new LinkedList<>();
            RESULT.add(b);
        :}
        |tLlaveC
        ;


ATRIBUTO ::=tBorder tGuion  E:a tPuntoComa{:RESULT = new Atributo("border",a);:} 
        | tHight tDosPuntos  E:a tPuntoComa{:RESULT = new Atributo("height",a);:}
        | tWidth tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("width",a);:}
        | tBorder tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("BorderTrue",a);:}
        | tBorder tGuion tColor tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("BorderColor",a);:}
        | tBorder tGuion tWidth tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("BorderWidth",a);:}
        | tBorder tGuion tHight tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("BorderHight",a);:}
        | tBackground tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("Background",a);:}
        | tFont tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("Font",a);:}
        | tAlign tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("Align",a);:}
        | tFont tGuion tColor tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("FontColor",a);:}
        | tFont tGuion tSize tDosPuntos E:a tPuntoComa{:RESULT = new Atributo("FontSize",a);:}
        | tBackground tDosPuntos tRgb tParA tEntero:r tComa tEntero:g tComa tEntero:b tParC tPuntoComa{:
            RESULT = new Atributo("rgb",Integer.parseInt(r),Integer.parseInt(g),Integer.parseInt(b))
        ;:}
        ;
E ::=  tEntero:a  {:RESULT=new Literal(Simbolo.EnumTipoDato.ENTERO, a);:}
    | tId:a {:RESULT=new Id(a, aright, aleft);:}
    | tCadena:a {:RESULT=new Literal(Simbolo.EnumTipoDato.CADENA, a);:}
    | tCaracter:a {:RESULT=new Literal(Simbolo.EnumTipoDato.CARACTER, a);:}
    ;